// Code generated by "enumer -type InstallationPhase -output zz_generated_installationphase_enumer.go"; DO NOT EDIT.

//
package api

import (
	"fmt"
)

const _InstallationPhaseName = "InstallationPhaseDeployStorageInstallationPhaseDeployResourcesInstallationPhaseRemoveBootstrap"

var _InstallationPhaseIndex = [...]uint8{0, 30, 62, 94}

func (i InstallationPhase) String() string {
	if i < 0 || i >= InstallationPhase(len(_InstallationPhaseIndex)-1) {
		return fmt.Sprintf("InstallationPhase(%d)", i)
	}
	return _InstallationPhaseName[_InstallationPhaseIndex[i]:_InstallationPhaseIndex[i+1]]
}

var _InstallationPhaseValues = []InstallationPhase{0, 1, 2}

var _InstallationPhaseNameToValueMap = map[string]InstallationPhase{
	_InstallationPhaseName[0:30]:  0,
	_InstallationPhaseName[30:62]: 1,
	_InstallationPhaseName[62:94]: 2,
}

// InstallationPhaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstallationPhaseString(s string) (InstallationPhase, error) {
	if val, ok := _InstallationPhaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstallationPhase values", s)
}

// InstallationPhaseValues returns all values of the enum
func InstallationPhaseValues() []InstallationPhase {
	return _InstallationPhaseValues
}

// IsAInstallationPhase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstallationPhase) IsAInstallationPhase() bool {
	for _, v := range _InstallationPhaseValues {
		if i == v {
			return true
		}
	}
	return false
}
