// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jim-minter/rp/pkg/util/azureclient/authorization (interfaces: PermissionsClient)

// Package mock_authorization is a generated GoMock package.
package mock_authorization

import (
	context "context"
	reflect "reflect"

	authorization "github.com/Azure/azure-sdk-for-go/services/authorization/mgmt/2015-07-01/authorization"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionsClient is a mock of PermissionsClient interface
type MockPermissionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsClientMockRecorder
}

// MockPermissionsClientMockRecorder is the mock recorder for MockPermissionsClient
type MockPermissionsClientMockRecorder struct {
	mock *MockPermissionsClient
}

// NewMockPermissionsClient creates a new mock instance
func NewMockPermissionsClient(ctrl *gomock.Controller) *MockPermissionsClient {
	mock := &MockPermissionsClient{ctrl: ctrl}
	mock.recorder = &MockPermissionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionsClient) EXPECT() *MockPermissionsClientMockRecorder {
	return m.recorder
}

// ListForResource mocks base method
func (m *MockPermissionsClient) ListForResource(arg0 context.Context, arg1 string) ([]authorization.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", arg0, arg1)
	ret0, _ := ret[0].([]authorization.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource
func (mr *MockPermissionsClientMockRecorder) ListForResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockPermissionsClient)(nil).ListForResource), arg0, arg1)
}
