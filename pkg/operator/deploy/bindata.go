// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4f\x6f\xe3\xd8\x0d\xbf\xfb\x53\x10\xe9\x61\x0e\x8d\x95\x19\xec\xa5\xf5\x6d\x90\xd9\x16\x41\xb7\xdb\xc1\x24\x98\xcb\x66\x0f\xd4\x13\x2d\xb3\x79\x7a\x4f\xe5\xa3\x92\xf1\x14\xfd\xee\x05\x9f\x24\x5b\x76\xa4\x75\x5a\x60\x75\x31\xc4\xf7\xf8\x9f\xfc\x91\xd6\x6a\xbd\x5e\xaf\xb0\xe5\xaf\x24\x89\x63\xd8\x00\xb6\x4c\xdf\x94\x82\xbd\xa5\xe2\xe9\x4f\xa9\xe0\x78\xf3\xfc\xa1\x24\xc5\x0f\xab\x27\x0e\xd5\x06\x6e\xbb\xa4\xb1\xf9\x42\x29\x76\xe2\xe8\x13\x6d\x39\xb0\x72\x0c\xab\x86\x14\x2b\x54\xdc\xac\x00\x30\x84\xa8\x68\xe4\x64\xaf\x00\x2e\x06\x95\xe8\x3d\xc9\xba\xa6\x50\x3c\x75\x25\x95\x1d\xfb\x8a\x24\x6b\x18\xf5\x3f\xbf\x2f\x7e\x28\xde\xaf\x00\x9c\x50\x66\x7f\xe0\x86\x92\x62\xd3\x6e\x20\x74\xde\xaf\x00\x02\x36\xb4\x01\xe7\xbb\xa4\x24\xa9\x40\x89\x45\x6c\x29\xa4\x1d\x6f\xb5\xe0\xb8\x4a\x2d\x39\xd3\x59\x4b\xec\xda\x0d\xbc\x3a\xef\x25\x0c\x66\x0d\x2e\xf5\xc2\x32\xc5\x73\xd2\xbf\x4d\xa9\x3f\x71\xd2\x7c\xd2\xfa\x4e\xd0\x1f\x55\x67\x62\xe2\x50\x77\x1e\xe5\x40\x5e\x01\x24\x17\x5b\x9a\x4a\x4d\x5d\x29\x43\xbc\x06\xbd\x49\x51\xbb\xb4\x81\x7f\xff\x67\x05\xf0\x8c\x9e\xab\xec\x6d\x7f\x68\xe6\x7e\xfc\x7c\xf7\xf5\x87\x7b\xb7\xa3\x06\x7b\x22\x40\x45\xc9\x09\xb7\xf9\xde\x28\x1c\x38\x81\xee\x08\xfa\x9b\xb0\x8d\x92\x5f\x47\x13\xe1\xe3\xe7\xbb\x81\xbb\x95\xd8\x92\x28\x8f\x16\xd8\x33\xc9\xfc\x81\x76\xa6\xe7\x9d\x19\xd2\xdf\x81\xca\x72\x4d\xbd\xc2\x21\x63\x54\x41\xea\x55\xc7\x2d\xe8\x8e\x13\x08\xb5\x42\x89\x42\x9f\xfd\x89\x58\xb0\x2b\x18\x20\x96\xff\x24\xa7\x05\xdc\x93\x98\x10\x48\xbb\xd8\xf9\xca\x0a\xe4\x99\x44\x41\xc8\xc5\x3a\xf0\xf7\x83\xe4\x04\x1a\xb3\x4a\x8f\x4a\x43\x2a\xc6\x87\x83\x92\x04\xf4\x16\xc2\x8e\xae\x01\x43\x05\x0d\xee\x41\xc8\x74\x40\x17\x26\xd2\xf2\x95\x54\xc0\xdf\xa3\x10\x70\xd8\xc6\x0d\xec\x54\xdb\xb4\xb9\xb9\xa9\x59\xc7\x5a\x77\xb1\x69\xba\xc0\xba\xbf\xc9\x15\xcb\x65\xa7\x51\xd2\x4d\x45\xcf\xe4\x6f\x12\xd7\x6b\x14\xb7\x63\x25\xa7\x9d\xd0\x0d\xb6\xbc\xce\x86\x87\x5c\xea\x45\x53\xfd\xe1\x90\xe8\x77\x13\x4b\x75\x6f\x05\x91\x54\x38\xd4\x07\x72\xae\xbd\xc5\xb8\x5b\x0d\x5a\x76\x71\x60\xeb\xed\x3f\x86\xd7\x48\x16\x95\x2f\x3f\xde\x3f\xc0\xa8\x34\xa7\xe0\x34\xe6\x39\xda\x47\xb6\x74\x0c\xbc\x05\x8a\xc3\x96\xa4\x4f\xdc\x56\x62\x93\x25\x52\xa8\xda\xc8\x41\x87\x4a\x62\x0a\xa7\x41\x4f\x5d\xd9\xb0\x5a\xa6\xff\xd5\x51\x52\xcb\x4f\x01\xb7\xb9\xe3\xa1\x24\xe8\xda\x0a\x95\xaa\x02\xee\x02\xdc\x62\x43\xfe\x16\x13\xfd\xee\x61\xb7\x08\xa7\xb5\x85\xf4\x72\xe0\xa7\x40\x75\x7a\xb1\x8f\xd6\x81\x3c\x42\xc9\x6c\x86\x86\x0e\xbc\x6f\xc9\x9d\x74\x46\x45\x89\xc5\xaa\x57\x51\xc9\x6a\x7e\x8a\x2e\xcb\xbd\x98\xfb\xd1\xc9\xa7\xd8\x20\x87\x53\xf2\x82\x1b\x03\xc7\xcf\x86\x87\x6f\xbd\x5f\x53\xa0\x67\xfc\x29\xd6\x35\x87\xfa\x9c\x6b\xc9\x2c\xe8\xf1\x7b\xcb\xf5\x0c\x5a\x1c\x98\x51\xad\x17\x37\xf0\xee\x97\xf7\xeb\x3f\xff\xfa\xc7\xa2\xff\x79\x37\x73\x75\xd1\x3a\x7b\x9a\x18\x58\xa3\x1d\xfd\xf5\xf6\xfe\xc7\xf0\xcc\x12\x43\x43\x41\xe7\x74\x52\xe8\x9a\x39\xfa\x1a\x3e\x31\xd6\x21\x26\x65\x97\x3e\x4b\xac\x66\xef\x3c\x9c\xa3\xc9\x45\xeb\x66\x8b\x04\x0e\x38\x44\x7a\xbb\x23\xf7\x44\xf2\xbf\x04\xb6\x13\x3f\x43\x05\x60\xa5\x66\xf6\xe0\x42\xfc\xc6\x63\x14\xc1\xfd\x5b\xed\xf7\xd1\x4d\xe6\xcf\x1b\x34\x8d\x80\x73\x57\x9d\xb3\x9c\xf4\xc8\xb8\x25\xdc\x7d\x1a\x07\xd5\xc7\xef\x9d\xd0\x84\xbd\x9f\x1b\x34\x99\x9e\x6f\xd0\x3f\xdf\xac\xfd\x48\xbd\xd4\xae\xf9\xd6\x49\xc3\xc6\x32\x19\x22\xfe\x5f\x1d\xeb\x62\xa8\x78\xb2\xe6\x2c\x29\x3f\x5c\x1b\x20\x9d\x34\xeb\x19\xc9\xc0\x21\x29\x06\x47\xa9\x38\x13\xb3\x50\x06\x27\xd2\xaf\x8e\x72\x8e\x38\xdf\x8f\x5a\xf3\x2c\x67\xf6\x64\xf8\xbe\x4b\xbd\xaf\xe7\xca\xec\x99\x98\x8a\x42\xc6\x73\x58\x08\xa1\x21\xb7\xc3\xc0\xa9\xc9\x05\x1f\x2a\xaa\x6c\x36\x1b\xe6\x27\xaa\xe0\x65\x47\xc1\x02\x3a\x23\xb4\x22\x45\xf6\xe9\x60\xc4\xd1\x2c\xd3\x61\x83\x03\xa1\x15\x8e\xc2\xf0\x14\xe2\x4b\x80\x28\xf0\x92\xd7\x82\x7c\xd6\xb6\xfe\xbc\x94\x73\x19\x44\x40\xef\x8f\xb1\xcb\xe2\xa1\xe6\x67\x0a\x60\xe3\xb3\x80\xc7\x30\xf5\x67\xd8\x34\x4a\x02\xac\x2a\x9a\x03\x05\x8d\x40\xdf\x5a\xcf\x8e\xd5\xef\xfb\x95\x64\x3f\xc9\x3d\xe8\x0e\xd5\x9c\x95\x94\x57\x0d\x17\x9b\x36\x86\x1c\x6d\x97\x83\x55\xc6\x6e\x0e\x52\x04\x75\x97\xc7\x2c\x86\x3c\x35\x59\xfa\xe9\x1d\x13\x9d\x48\xcf\xb1\xcc\x23\xd9\x06\x48\x1e\xc8\xd1\x38\x67\x44\x4e\x62\x98\x0a\xf8\x47\x70\x34\xd4\x74\x75\x9d\x8b\xba\x21\x0c\xa6\x24\x87\xe4\x58\x1f\x0e\x03\xf4\x73\x7a\x46\xa6\x25\xb7\xa6\x0a\x50\x4a\x56\x41\x61\xbf\x87\x35\xb0\xdd\x76\xb1\xa1\x04\x2d\x8a\x8e\x0d\xfb\xf1\xf3\x5d\xbf\x6f\xed\xb0\x6f\xa3\x84\xcd\x9c\xd0\x12\xdd\xd3\x0b\x4a\x95\xd6\xf9\xf6\x36\x4a\xff\x66\xb1\x43\xe5\x92\x3d\x6b\x0e\xb5\x23\x09\x43\x85\xec\x7b\xb7\xb3\xbe\x39\xdf\x0f\x16\x14\x57\xaf\x8e\x7f\x0b\x6b\x01\x3c\x26\x7d\x10\x0c\x89\xc7\x3f\x17\xf3\x10\xbb\x8d\xd2\xa0\x6e\xc0\x56\x99\xb5\xf2\xac\x67\x17\x81\xb8\xa1\x94\xb0\x5e\xd0\x70\x81\x57\x08\xd3\xfc\xa0\x5d\x82\x96\x2f\x99\xc3\xf0\xe5\xac\x39\x11\x62\xa0\xf5\x4b\x94\xea\xfa\xb8\x90\xcd\x0a\x86\xb3\xed\xfd\x00\xce\xa8\x54\x47\xd9\xdb\xbb\xc3\x2e\xd1\xe1\xa0\x13\xa1\xa0\x03\xf6\xce\xc1\x89\x3d\x77\x3a\x63\x55\x86\x0c\x0e\x39\xf3\x6c\x12\x3b\x6d\x3b\xbd\x86\xd4\xb9\x1d\x60\xca\x36\x7b\x0e\x4b\x86\xda\x1f\x48\xa7\x1e\x6a\x43\xd2\x81\xd5\xea\x8b\x03\xa4\xae\x69\x50\xf8\x7b\x2e\x7f\xd7\x9b\x38\xa0\x43\x36\x7e\xc1\xce\x0b\x09\x79\x3d\x5e\xde\xcc\x9a\x8f\x2f\x67\xf2\x08\xe3\x0f\xfb\x96\xc6\x81\x69\xcc\x87\x70\x1f\xfa\x38\xbb\x9a\x16\x62\xa3\xfb\x96\x1d\x7a\xbf\xb7\xd6\x1f\x13\x5e\x81\x55\x80\x01\x6b\xda\x45\x51\x68\x77\x92\xf7\xf2\x29\x44\x66\x65\x4b\x52\x07\xf4\xe4\x50\xb1\xd5\xc3\x30\x2d\x39\x43\x3e\x3c\x5e\x61\x19\xac\x67\xfc\x5a\xa5\xa3\xc7\x2b\x68\xa3\x47\x61\xdd\x17\xf0\x97\x38\x07\x60\xf6\xd0\x37\x6c\x5a\x4f\xd7\xc0\xe7\xfe\x8d\x5a\x52\x3f\x55\xd0\xc4\xb1\xdb\xf7\x75\x94\xff\x2f\x5f\x2f\x39\x9f\xad\xe1\xd4\xff\xab\x7e\xbc\x02\x87\x29\x07\xb3\x95\x58\x62\xe9\xf7\xf9\x86\xd9\x7a\x0d\x29\x9e\xaa\xfd\x6d\xcf\x4b\x6b\x04\xef\xa9\x82\xc7\xab\xbb\x30\x88\x9f\x41\x20\xb8\x54\x11\xfd\x08\xa0\x57\xab\x93\x2d\xa5\x7d\x99\xcd\x1c\x98\xc4\x57\xe4\xc5\x85\x6e\x79\x0b\x34\x74\x44\x8d\xb2\xb0\xca\xbf\x7d\xe3\x3a\x23\x1d\x3f\xe1\x7c\x40\xdf\xee\xf0\xc3\x91\x96\xbb\x66\x3d\x7c\xb8\x99\x1c\x03\xf4\x8b\xd7\x06\xac\x66\x86\xef\x22\x51\x0c\x32\x7b\xca\xb1\xe7\xd0\x39\x6a\x95\xaa\x9f\xcf\x3f\xdd\x5c\x5d\x9d\x7c\x9b\xc9\xaf\x93\xa5\x0c\x7e\xf9\x75\xd5\x4b\xa5\xea\xeb\x68\x8d\x11\xff\x1b\x00\x00\xff\xff\xff\xcb\xfc\x9c\xfa\x12\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xbd\x8e\xdb\x30\x0c\xde\xfd\x14\xc4\xed\xbe\x9f\xed\xa0\xed\xd0\x0b\xba\x14\x41\xd1\xf4\xba\x33\x32\x93\x08\x91\x44\x81\xa4\x83\x4b\x9f\xbe\x50\x1d\x2b\x0e\x0a\xa4\x9c\x0c\x7e\xfc\x7e\x48\x19\x4b\xf8\x45\xa2\x81\xb3\x03\x2c\x45\x9f\x4e\x2f\xdd\x31\xe4\xc1\xc1\x3b\x95\xc8\xe7\x44\xd9\xba\x44\x86\x03\x1a\xba\x0e\x20\xe2\x96\xa2\xd6\x2f\xa8\x04\x07\x28\xdc\x73\x21\x41\x63\xe9\x13\xaa\x91\x74\x00\x19\x13\xdd\xc3\xb4\xa0\x27\x07\x5c\x28\xeb\x21\xec\xac\xc7\xdf\xa3\x50\x1b\xee\xb4\x90\xaf\x26\x42\x25\x06\x8f\xea\xe0\xa5\x03\x50\x8a\xe4\x8d\x65\xb2\x4f\x68\xfe\xf0\x6d\x91\xe7\x6e\x22\x35\x41\xa3\xfd\x79\x1a\x15\x8e\x31\xe4\xfd\x47\x19\xd0\x68\x66\x27\xfc\xdc\x8c\xb2\xa7\xc9\xec\xd2\xf9\xc8\x78\xc2\x10\x71\x1b\xc9\xc1\x73\x07\x60\x94\x4a\x6c\xac\xe5\x6d\x6a\xc5\x9b\x3c\x77\x13\x01\xcc\x5b\xd6\xf2\x9c\x0d\x43\x26\x69\xe4\x1e\x3c\xa7\x84\x79\xb8\xaa\xf5\x55\xea\xaa\x2d\x7b\x5d\x62\xed\x7a\xd7\xd6\xc2\xac\x56\x48\x58\xd7\xfb\xba\x5a\xaf\x7e\xbc\xfd\x5c\xbd\x37\xe0\xdf\xf7\x6a\x50\x61\xb1\x1b\x9b\x96\xf4\x3b\x8b\x39\x78\x7d\x7e\x7d\x6e\xe8\xac\x74\x30\x2b\x97\x66\xe6\x81\x36\x37\x0f\x37\x77\x7b\xe1\x48\x8f\xc7\x71\x4b\x92\xc9\x48\x1f\x03\x3f\x4d\x81\x1d\x3c\x3c\x5c\x46\x95\xe4\x14\x3c\xbd\x79\xcf\x63\xb6\xf5\x9d\xff\xea\x6f\x58\x09\x2c\xc1\xce\x5f\x22\xaa\x4e\xc3\x7a\x56\xa3\xd4\xfb\x38\xd6\xb9\xde\x4b\xb0\xe0\x31\x5e\x08\xc6\xb1\xea\x04\xce\x8b\xbb\x1f\xe9\xec\xfe\x93\xb0\x2d\x32\xe7\x70\xb0\xfa\x0c\x6a\xda\x00\xda\xed\xc8\x9b\x83\x35\x6f\xfc\x81\x86\x31\x52\xf7\x27\x00\x00\xff\xff\xf5\xb6\xb6\x54\x6e\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xb1\x6e\xdc\x30\x0c\xdd\xf5\x15\x44\x76\x25\xcd\xaa\x2d\x68\x0e\x5d\x8a\x0c\x4d\xd3\x9d\x27\xb3\x8e\x70\x92\x28\x90\xf4\xb5\xee\xd7\x17\x82\xef\x7c\x0e\x02\x98\x93\xc1\xf7\x1e\xdf\x23\x2d\x6c\xe9\x17\x89\x26\xae\x01\xb0\x35\x7d\x38\x3f\xba\x53\xaa\x43\x80\x67\x6a\x99\xe7\x42\xd5\x5c\x21\xc3\x01\x0d\x83\x03\xc8\x78\xa4\xac\xfd\x0b\xba\x20\x00\x0a\x7b\x6e\x24\x68\x2c\xfe\x0f\xcb\x89\xc4\x01\x54\x2c\xb4\x87\x69\xc3\x48\x01\xb8\x51\xd5\xf7\xf4\xdb\x3c\xfe\x9b\x84\x56\xb2\xd3\x46\xb1\x9b\x08\xb5\x9c\x22\x6a\x80\x47\x07\xa0\x94\x29\x1a\xcb\x62\x5f\xd0\xe2\xfb\xf7\x4d\x9e\xdd\x44\x6a\x82\x46\xe3\xbc\x50\x85\x73\x4e\x75\x7c\x6b\x03\x1a\x5d\xd5\x05\xff\xbe\x4e\x32\xd2\x62\x76\xe9\xbc\x55\x3c\x63\xca\x78\xcc\x14\xe0\x8b\x03\x30\x2a\x2d\xaf\xaa\xed\x6d\x7a\xe5\x0f\x79\x76\x13\x01\x5c\xb7\xec\x15\xb9\x1a\xa6\x4a\xb2\x8a\x3d\x44\x2e\x05\xeb\x70\x9b\xe6\xfb\xa8\xdb\x6c\x19\x75\x8b\xad\xd7\xbb\xb5\x36\x66\xbd\x52\xc1\xbe\xde\xb7\xc3\xcb\xe1\xc7\xd3\xcf\xc3\xf3\x0a\x7c\xfe\x5f\x17\xa8\xf2\x40\xaf\x1f\xce\x7e\xed\x7a\xe1\x4c\xf7\xa7\xe9\x48\x52\xc9\x48\xef\x13\x3f\x2c\x76\x01\xee\xee\x2e\x54\x25\x39\xa7\x48\x4f\x31\xf2\x54\xed\x65\xe7\x55\xf4\x6a\x92\x58\x92\xcd\x5f\x33\xaa\x2e\x64\x9d\xd5\xa8\xf8\x98\x27\x35\x12\x1f\x25\x59\x8a\x98\xdd\xff\x00\x00\x00\xff\xff\x1c\x57\xc1\x70\xb9\x02\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
