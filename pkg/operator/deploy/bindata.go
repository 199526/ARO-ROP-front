// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x41\x6f\xe3\xca\xed\xbf\xfb\x53\x10\xf9\x1f\xf2\x2f\x1a\x3b\x5d\xf4\xd2\xfa\xb6\xc8\xbe\x16\x41\x5f\x5f\x17\x9b\x60\x2f\x2f\xef\x40\x8d\x68\x99\xcd\x68\x46\xe5\x50\xc9\x7a\x8b\x7e\xf7\x82\x33\x92\x2d\x3b\xf2\x73\x5a\xa0\xba\x18\xe2\xcc\x90\x9c\x1f\xc9\x1f\x69\x2d\x96\xcb\xe5\x02\x3b\xfe\x4a\x92\x38\x86\x35\x60\xc7\xf4\x4d\x29\xd8\x5b\x5a\x3d\xff\x21\xad\x38\xde\xbe\x7c\xa8\x48\xf1\xc3\xe2\x99\x43\xbd\x86\xbb\x3e\x69\x6c\xbf\x50\x8a\xbd\x38\xfa\x44\x1b\x0e\xac\x1c\xc3\xa2\x25\xc5\x1a\x15\xd7\x0b\x00\x0c\x21\x2a\x9a\x38\xd9\x2b\x80\x8b\x41\x25\x7a\x4f\xb2\x6c\x28\xac\x9e\xfb\x8a\xaa\x9e\x7d\x4d\x92\x2d\x8c\xf6\xff\xbf\x0f\xcf\x21\xbe\x86\xdf\x2c\x00\x9c\x50\xd6\xf0\xc8\x2d\x25\xc5\xb6\x5b\x43\xe8\xbd\x5f\x00\x04\x6c\x69\x0d\xce\xf7\x49\x49\xd2\x0a\x25\xae\x62\x47\x21\x6d\x79\xa3\x2b\x8e\x8b\xd4\x91\x33\xb3\x8d\xc4\xbe\x5b\xc3\x9b\xf5\xa2\x61\xf0\x6c\xb8\x55\x51\x96\x25\x9e\x93\xfe\x65\x2a\xfd\x91\x93\xe6\x95\xce\xf7\x82\xfe\x60\x3a\x0b\x13\x87\xa6\xf7\x28\x7b\xf1\x02\x20\xb9\xd8\xd1\x54\x6b\xea\x2b\x19\x20\x1b\xec\x26\x45\xed\xd3\x1a\xfe\xf9\xaf\x05\xc0\x0b\x7a\xae\xf3\x6d\xcb\xa2\xb9\xfb\xf1\xf3\xfd\xd7\xdf\x3f\xb8\x2d\xb5\x58\x84\x00\x35\x25\x27\xdc\xe5\x7d\xa3\x72\xe0\x04\xba\x25\x28\x3b\x61\x13\x25\xbf\x8e\x2e\xc2\xc7\xcf\xf7\xc3\xe9\x4e\x62\x47\xa2\x3c\x7a\x60\xcf\x24\xf8\x7b\xd9\x89\x9d\x6b\x73\xa4\xec\x81\xda\xc2\x4d\xc5\xe0\x10\x34\xaa\x21\x15\xd3\x71\x03\xba\xe5\x04\x42\x9d\x50\xa2\x50\x12\x60\xa2\x16\x6c\x0b\x06\x88\xd5\xdf\xc9\xe9\x0a\x1e\x48\x4c\x09\xa4\x6d\xec\x7d\x6d\x39\xf2\x42\xa2\x20\xe4\x62\x13\xf8\xfb\x5e\x73\x02\x8d\xd9\xa4\x47\xa5\x21\x14\xe3\xc3\x41\x49\x02\x7a\x83\xb0\xa7\x1b\xc0\x50\x43\x8b\x3b\x10\x32\x1b\xd0\x87\x89\xb6\xbc\x25\xad\xe0\xaf\x51\x08\x38\x6c\xe2\x1a\xb6\xaa\x5d\x5a\xdf\xde\x36\xac\x63\xba\xbb\xd8\xb6\x7d\x60\xdd\xdd\xe6\xa4\xe5\xaa\xd7\x28\xe9\xb6\xa6\x17\xf2\xb7\x89\x9b\x25\x8a\xdb\xb2\x92\xd3\x5e\xe8\x16\x3b\x5e\x66\xc7\x43\xce\xf6\x55\x5b\xff\xdf\x3e\xd0\xd7\x13\x4f\x75\x67\x09\x91\x54\x38\x34\x7b\x71\xce\xbd\xb3\xb8\x5b\x0e\x5a\x74\x71\x38\x56\xfc\x3f\xc0\x6b\x22\x43\xe5\xcb\x0f\x0f\x8f\x30\x1a\xcd\x21\x38\xc6\x3c\xa3\x7d\x38\x96\x0e\xc0\x1b\x50\x1c\x36\x24\x25\x70\x1b\x89\x6d\xd6\x48\xa1\xee\x22\x07\x1d\x32\x89\x29\x1c\x83\x9e\xfa\xaa\x65\xb5\x48\xff\xa3\xa7\xa4\x16\x9f\x15\xdc\xe5\xa2\x87\x8a\xa0\xef\x6a\x54\xaa\x57\x70\x1f\xe0\x0e\x5b\xf2\x77\x98\xe8\x7f\x0e\xbb\x21\x9c\x96\x06\xe9\x65\xe0\xa7\x5c\x75\xbc\xb1\xa0\xb5\x17\x8f\x54\x32\x1b\xa1\xa1\x02\x1f\x3a\x72\x47\x95\x51\x53\x62\xb1\xec\x55\x54\xb2\x9c\x9f\xb2\xcb\xf9\x5a\xcc\xf5\xe8\xe4\x27\x63\xb7\x23\xe1\x99\x4b\xd8\xd3\x50\xa0\x17\xfc\x31\x36\x0d\x87\xe6\xf4\xd4\x39\x23\x50\x08\x79\xc3\xcd\x4c\xed\xef\x0f\xa3\x5a\x65\xad\xe1\xfa\xe7\xdf\x2d\xff\xf8\xcb\x6f\x57\xe5\xe7\x7a\x66\xeb\x59\xef\x32\xd4\x31\xb0\x46\x5b\xfa\xf3\xdd\xc3\x0f\xe1\x85\x25\x86\x96\x82\xce\xd9\xa4\xd0\xb7\x73\xf2\x25\x7c\x62\x6c\x42\x4c\xca\x2e\x7d\x96\x58\xcf\xee\x79\x3c\xe5\x86\x8b\xde\xcd\x86\x1c\xf6\xac\x42\x7a\xb7\x25\xf7\x4c\xf2\x9f\x00\xdb\x8b\x9f\x91\x02\xb0\x52\x3b\xbb\x70\x01\xbf\x71\x19\x45\x70\xf7\x5e\xff\x7d\x74\x93\x6e\xf2\x0e\x4b\x23\x7d\xdc\xd7\xa7\x47\x8e\x32\x7e\x6c\xfb\xf7\x9f\xc6\xb6\xf3\xf1\x7b\x2f\x34\x39\x5e\xba\x00\x4d\x7a\xe1\x3b\xec\xcf\x97\x5e\x69\x90\x97\x8a\x2f\xef\x3a\x2a\xbf\x58\x25\xe3\xb7\xff\xaa\xfe\x5c\x0c\x35\x4f\xe6\x96\x73\xc6\xf7\xdb\x06\x82\x26\xcd\x76\x46\x31\x70\x48\x8a\xc1\x51\x5a\x9d\xa8\x39\x93\x06\x47\xda\xaf\x0e\x7a\x0e\xac\x5d\x1a\xa7\xdd\x2c\x47\xf6\xa8\x95\x5e\xa7\x72\xd7\x53\x63\xf6\x4c\x5c\x45\x21\x3b\xb3\x9f\xf0\xa0\x25\xb7\xc5\xc0\xa9\xcd\x09\x1f\x6a\xaa\xad\xd3\x1a\x83\x27\xaa\xe1\x75\x4b\xc1\x00\x9d\x51\x5a\x93\x22\xfb\xb4\x77\xe2\xe0\x96\xd9\xb0\x36\x80\xd0\x09\x47\x61\xc8\xf3\x1c\x44\x81\xd7\xdc\xe4\xf3\x5a\xd7\xf9\xd3\x54\xce\x69\x10\x01\xbd\x3f\x60\x97\xd5\x43\xc3\x2f\x14\xc0\x9a\xe1\x0a\x9e\xc2\xf4\x3e\xc3\xdc\x50\x11\x60\x5d\xd3\x1c\x29\x68\x04\xfa\xd6\x79\x76\xac\x7e\x57\x06\x8c\xdd\x24\xf6\xa0\x5b\x54\xbb\xac\xa4\x3c\x38\xb8\xd8\x76\x31\x64\xb4\x5d\x06\xab\x8a\xfd\x1c\xa5\x08\xea\x36\x37\x4d\x0c\xb9\x07\xb2\x94\x5e\x1c\x13\x1d\x69\xcf\x58\xe6\x06\x6b\xed\x20\xb7\xd7\x68\x27\x67\x54\x4e\x30\x4c\x2b\xf8\x5b\x70\x34\xe4\x74\x7d\x93\x93\xba\x25\x0c\x66\x24\x43\x72\xc8\x0f\x87\x01\x4a\xd7\x9d\xd1\x69\xc1\x6d\xa8\x06\x94\x8a\x55\x50\xd8\xef\x60\x09\x6c\xbb\x5d\x6c\x29\x41\x87\xa2\x63\xc1\x7e\xfc\x7c\x5f\xa6\xa7\x2d\x96\x32\x4a\xd8\xce\x29\xad\xd0\x3d\xbf\xa2\xd4\x69\x99\x77\x6f\xa2\x94\x37\xc3\x0e\x95\x2b\xf6\xac\x19\x6a\x47\x12\x86\x0c\xd9\x95\x6b\x67\x7b\x73\x77\xdf\x7b\xb0\xba\x7a\xb3\xfc\x6b\x5c\x0b\xe0\x31\xe9\xa3\x60\x48\x3c\xfe\x55\x98\xa7\xd8\x4d\x94\x16\x75\x0d\x36\x98\x2c\x95\x67\x6f\x76\x91\x88\x5b\x4a\x09\x9b\x33\x16\x2e\x9c\x15\xc2\x34\xdf\x68\xcf\x51\xcb\x97\x7c\xc2\xf8\xe5\xa4\x38\x11\x62\xa0\xe5\x6b\x94\xfa\xe6\x30\x5e\xcd\x2a\x86\x93\x59\x7c\x4f\xce\xa8\xd4\x44\xd9\xd9\xbb\xc3\x3e\xd1\x7e\xa1\x17\xa1\xa0\x03\xf7\xce\xd1\x89\x3d\xf7\x3a\xe3\x55\xa6\x0c\x0e\x39\xf2\x6c\x1a\x7b\xed\x7a\xbd\x81\xd4\xbb\x2d\x60\xca\x3e\x7b\x0e\xe7\x1c\xb5\x7f\x84\x4e\x3d\x34\xc6\xa4\xc3\x51\xcb\x2f\x0e\x90\xfa\xb6\x45\xe1\xef\x39\xfd\x5d\x71\x71\x60\x87\xec\xfc\x19\x3f\x2f\x04\xe4\x6d\x7b\x79\xf7\xd1\xbc\x7c\x39\x92\x07\x1a\x7f\xdc\x75\x34\x36\x4c\x3b\xbc\x87\x7b\x5f\xc7\xf9\xaa\xe9\x0c\x36\xba\xeb\xd8\xa1\xf7\x3b\x2b\xfd\x31\xe0\x35\x58\x06\x18\xb1\xa6\x6d\x14\x85\x6e\x2b\x79\xca\x9e\x52\x64\x36\x76\x4e\xeb\xc0\x9e\x1c\x6a\xb6\x7c\x18\xba\x25\x67\xca\x87\xa7\x2b\xac\x82\xd5\x8c\x5f\xaa\xf4\xf4\x74\x05\x5d\xf4\x28\xac\xbb\x15\xfc\x29\xce\x11\x98\x3d\xf4\x0d\xdb\xce\xd3\x0d\xf0\xe9\xfd\x46\x2b\xa9\x74\x15\x34\x75\xec\x76\x25\x8f\xf2\xbf\xdf\x9b\x73\x97\xcf\xde\x70\x2a\xff\x91\x9f\xae\xc0\x61\xca\x60\x76\x12\x2b\xac\xfc\x2e\xef\x30\x5f\x6f\x20\xc5\x63\xb3\xbf\x7e\xf3\xca\x0a\xc1\x7b\xaa\xe1\xe9\xea\x3e\x0c\xea\x67\x18\x08\x2e\x65\x44\x69\x01\xf4\x66\x74\xb2\xa1\xb4\xa4\xd9\xcc\x82\x69\x7c\x23\x3e\x3b\xd0\x9d\x9f\x02\x8d\x1d\x51\xa3\x9c\x19\xe5\xdf\x3f\x71\x9d\x88\xf6\xdf\x64\x5e\x3e\xa0\xef\xb6\xf8\xe1\x20\xcb\x55\xb3\x1c\x3e\xc3\x4c\x96\x01\xca\xe0\xb5\x06\xcb\x99\xe1\x2b\x47\x14\xa3\xcc\x22\x39\xd4\x1c\x3a\x47\x9d\x52\xfd\xd3\xe9\x87\x98\xab\xab\xa3\x2f\x2d\xf9\x75\x32\x94\xc1\xcf\xbf\x2c\x8a\x56\xaa\xbf\x8e\xde\x98\xf0\xdf\x01\x00\x00\xff\xff\x23\xfe\x4d\xcc\xcb\x12\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\xbd\xbb\x4d\x6f\x85\x6e\xc5\x17\xe3\xbb\x6c\x59\xd1\xac\xbb\x0e\x8c\xcc\x24\x42\x24\x51\xa0\x68\xa3\xde\xaf\x1f\x34\x27\x8a\x83\x01\x99\x4e\xc6\x23\x1f\xdf\x23\x9f\x31\xb9\x1f\x24\xd9\x71\x34\x80\x29\xe5\xa7\xf1\xb9\x39\xb9\xd8\x1b\x58\x53\xf2\x3c\x05\x8a\xda\x04\x52\xec\x51\xd1\x34\x00\x1e\x77\xe4\x73\xf9\x82\x42\x30\x80\xc2\x2d\x27\x12\x54\x96\x36\x60\x56\x92\x06\x20\x62\xa0\x7b\xb5\x9c\xd0\x92\x01\x4e\x14\xf3\xd1\xed\xb5\xc5\x5f\x83\x50\x6d\x6e\x72\x22\x5b\x44\x84\x92\x77\x16\xb3\x81\xe7\x06\x20\x93\x27\xab\x2c\xb3\x7c\x40\xb5\xc7\x2f\x0b\x3f\x77\x1d\x65\x15\x54\x3a\x4c\x73\xab\xb0\xf7\x2e\x1e\x3e\x52\x8f\x4a\x17\x76\xc0\xcf\xed\x20\x07\x9a\xc5\xce\xc8\x47\xc4\x11\x9d\xc7\x9d\x27\x03\xab\x06\x40\x29\x24\x5f\x59\xcb\xdb\x94\xe7\x6f\xfc\xdc\x75\x04\x70\xd9\xb2\x3c\xcb\x51\xd1\x45\x92\x4a\x6e\xc1\x72\x08\x18\xfb\xeb\xb4\xb6\x8c\xba\xce\x96\x43\x5e\xd6\xea\xf5\xae\xd0\x42\xac\x3c\x8a\xe3\x92\x30\xa7\xf4\xfe\xf6\xf3\xeb\xb7\x75\x57\x71\x80\x11\xfd\x40\x06\x1e\x1e\x2a\xe6\x02\x96\xbb\xfc\xdf\x6d\xba\xf7\xd7\xef\xdd\xba\x16\xfe\x0e\xba\x96\x12\x8b\xde\xf8\xab\x2b\xbe\xb1\xa8\x81\x97\xd5\xcb\x6a\x21\x3a\x4f\x3a\xaa\xa6\x33\x18\xb9\xa7\xed\x4d\xe2\x17\xb4\x15\xf6\xf4\x78\x1a\x76\x24\x91\x94\xf2\xa3\xe3\xa7\x79\xd3\x85\xe9\x4c\x32\x3a\x4b\xaf\xd6\xf2\x10\x75\x73\xe7\x87\xfc\x63\x56\x1c\x8b\xd3\xe9\x3f\x8f\x39\xcf\xcd\x79\xca\x4a\xa1\xb5\x7e\x28\x7d\xad\x15\xa7\xce\xa2\x3f\x13\x94\x7d\x99\xe3\x38\x2e\x02\x3b\xd1\x64\xfe\xe1\xb0\x2e\x72\xf1\x61\xa0\xfb\x74\x59\xf3\x35\xa4\xfd\x9e\xac\x1a\xd8\xf0\xd6\x1e\xa9\x1f\x3c\x35\xbf\x03\x00\x00\xff\xff\x6e\x8c\x9c\xb2\xa7\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x95\x34\xd7\xbd\x05\xb5\xd1\x4b\x9b\x16\x49\xd3\x6b\x41\xaf\xa6\xce\xc2\xfb\x02\x49\xa9\x75\xbf\xbe\x58\x28\x96\x15\x14\x10\x4f\xc2\x0c\x87\x33\x22\x97\x6b\xf8\x01\xd1\x50\xb2\x23\xae\x55\xef\xa6\xfb\xee\x14\xf2\xe0\x68\x87\x1a\xcb\x39\x21\x5b\x97\x60\x3c\xb0\xb1\xeb\x88\x22\x1f\x10\xb5\x7d\x51\x13\x38\x62\x29\x7d\xa9\x10\xb6\x22\xfd\xef\x22\x27\x48\x47\x94\x39\x61\x8b\xd3\xca\x1e\x8e\x4a\x45\xd6\xd7\xf0\xcb\x7a\xfe\x3b\x0a\x96\xe6\x4e\x2b\x7c\x33\x11\xd4\x18\x3c\xab\xa3\xfb\x8e\x48\x11\xe1\xad\xc8\x6c\x9f\xd8\xfc\xeb\xe7\x55\x9e\xcd\x44\x6a\xc2\x86\xe3\x79\x6e\x95\x12\x63\xc8\xc7\x97\x3a\xb0\xe1\xa2\x4e\xfc\xe7\x79\x94\x23\x66\xb3\x37\xe4\x25\xf3\xc4\x21\xf2\x21\xc2\xd1\x87\x8e\xc8\x90\x6a\x5c\x54\xeb\xdd\xb4\x8a\xef\xf2\x6c\x26\x22\xba\xfc\x65\x2b\x5f\xb2\x71\xc8\x90\x45\xdc\x93\x2f\x29\x71\x1e\xae\xd3\xfa\x36\xea\x3a\x5b\x8e\xba\xe6\x96\xed\x5d\xa1\x95\x59\x2b\xe4\x69\x2d\x98\xaf\xf4\xf4\xed\xe7\x97\xaf\xbb\xfd\x82\x13\x4d\x1c\x47\x38\xba\xb9\x59\xb0\x90\xb8\xed\xe5\xd3\xfe\x71\xff\xf4\xf0\x7d\xbf\x5b\x88\xff\x0f\xfd\x46\xe5\x32\xe0\xf9\xdd\xbd\x2e\x68\x2f\x25\xe2\xf6\x34\x1e\x20\x19\x06\xbd\x0d\xe5\x6e\xce\xb9\xb2\x54\xc8\x14\x3c\x1e\xbc\x2f\x63\xb6\xc7\x8d\xe7\xd4\xaa\x4a\x28\x12\xec\xfc\x31\xb2\xea\xdc\xac\x67\x35\xa4\xde\xc7\x51\x0d\xd2\x7b\x09\x16\x3c\xc7\xee\x5f\x00\x00\x00\xff\xff\x23\xb6\xd7\x23\xf2\x02\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
