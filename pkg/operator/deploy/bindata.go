// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/preview.aro.openshift.io_previewfeatures.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4f\x6f\xdb\xb8\x12\xbf\xfb\x53\x0c\xfa\x0e\x39\xbc\x67\xa5\x7d\x0f\x78\xd8\xf5\x2d\xb5\xdb\xae\xd1\x36\x35\xe2\xa0\x3d\x14\x3d\x8c\xa9\x91\x3c\x8d\x44\xaa\xe4\xd0\x6d\xba\xd8\xef\xbe\xa0\xfe\xd8\xb2\x23\x39\x56\x8c\x5e\xd6\x97\x44\xe4\xf0\x37\xff\x67\x38\x1c\x8d\xc7\xe3\x11\x16\xfc\x91\xac\x63\xa3\x27\x80\x05\xd3\x0f\x21\x1d\xbe\x5c\x74\xf7\x9b\x8b\xd8\x5c\x6e\x5e\x8c\xee\x58\xc7\x13\x98\x7a\x27\x26\xbf\x21\x67\xbc\x55\x34\xa3\x84\x35\x0b\x1b\x3d\xca\x49\x30\x46\xc1\xc9\x08\x00\xb5\x36\x82\x61\xd9\x85\x4f\x00\x65\xb4\x58\x93\x65\x64\xc7\x29\xe9\xe8\xce\xaf\x68\xe5\x39\x8b\xc9\x96\xe0\x0d\xeb\xcd\xf3\xe8\xff\xd1\x7f\x47\x00\xca\x52\x79\xfc\x96\x73\x72\x82\x79\x31\x01\xed\xb3\x6c\x04\xa0\x31\xa7\x09\xa8\xcc\x3b\x21\xeb\x22\xb4\x26\x32\x05\x69\xb7\xe6\x44\x22\x36\x23\x57\x90\x0a\x3c\x53\x6b\x7c\x31\x81\x07\xfb\x15\x42\x2d\x56\xad\x52\x05\x56\xae\x64\xec\xe4\x6d\x7b\xf5\x1d\x3b\x29\x77\x8a\xcc\x5b\xcc\x76\xac\xcb\x45\xc7\x3a\xf5\x19\xda\xed\xf2\x08\xc0\x29\x53\x50\x1b\xb5\x56\xaf\xe4\x39\xae\x15\xd8\xbc\xc0\xac\x58\xe3\x8b\x0a\x45\xad\x29\xc7\x4a\x24\x80\x20\xee\xd5\x62\xfe\xf1\x7f\xcb\xbd\x65\x80\x98\x9c\xb2\x5c\x48\x69\xaa\x1a\x1e\xd8\x81\xac\x09\x2a\x5a\x48\x8c\x2d\x3f\x1b\x21\xe1\x6a\x31\xdf\x9e\x2f\xac\x29\xc8\x0a\x37\xda\x57\xbf\x96\xeb\x5b\xab\x07\xdc\x2e\x82\x40\x15\x15\xc4\xc1\xe7\x54\xb1\xad\x55\xa3\xb8\xd6\x01\x4c\x02\xb2\x66\x07\x96\x0a\x4b\x8e\x74\x15\x05\x7b\xc0\x10\x88\x50\x83\x59\x7d\x25\x25\x11\x2c\xc9\x06\x18\x70\x6b\xe3\xb3\x38\x84\xca\x86\xac\x80\x25\x65\x52\xcd\x3f\xb7\xd8\x0e\xc4\x94\x4c\x33\x14\xaa\x9d\xb2\xfb\xb1\x16\xb2\x1a\x33\xd8\x60\xe6\xe9\x3f\x80\x3a\x86\x1c\xef\xc1\x52\xe0\x02\x5e\xb7\xf0\x4a\x12\x17\xc1\x7b\x63\x09\x58\x27\x66\x02\x6b\x91\xc2\x4d\x2e\x2f\x53\x96\x26\xe4\x95\xc9\x73\xaf\x59\xee\x2f\xcb\xe8\xe5\x95\x17\x63\xdd\x65\x4c\x1b\xca\x2e\x1d\xa7\x63\xb4\x6a\xcd\x42\x4a\xbc\xa5\x4b\x2c\x78\x5c\x8a\xae\xcb\xb0\x8f\xf2\xf8\x5f\xb6\x4e\x12\x77\xb1\x27\xab\xdc\x87\xf0\x70\x62\x59\xa7\xad\x8d\x32\x16\x8f\x78\x20\x44\x65\xf0\x36\xd6\x47\x2b\x2d\x76\x86\x0e\x4b\xc1\x3a\x37\xaf\x96\xb7\xd0\xb0\x2e\x9d\x71\x68\xfd\xd2\xee\xbb\x83\x6e\xe7\x82\x60\x30\xd6\x09\xd9\xca\x89\x89\x35\x79\x89\x49\x3a\x2e\x0c\x6b\xa9\x63\x8b\x49\x1f\x9a\xdf\xf9\x55\xce\x12\xfc\xfe\xcd\x93\x93\xe0\xab\x08\xa6\x65\x1d\x80\x15\x81\x2f\x62\x14\x8a\x23\x98\x6b\x98\x62\x4e\xd9\x14\x1d\xfd\x72\x07\x04\x4b\xbb\x71\x30\xec\x69\x2e\x68\x97\xb0\x43\xe2\xca\x6a\xad\x8d\xa6\xd0\xf4\xf8\xab\xce\xcf\x65\x41\x6a\x2f\x63\x62\x72\x6c\x43\x4c\x0b\x0a\x85\x4c\x68\x57\x9f\xe6\xd7\x9d\xa9\xe1\x87\xca\xce\x4c\x8e\xac\x0f\x37\x7a\x95\x82\x2a\xc7\xe7\x5a\xe6\x8b\x61\x87\x5a\xd6\xed\xac\x10\xbb\xf3\x21\xf9\xd2\x03\x1d\x00\xf0\xe7\x2b\xbd\x61\x6b\x74\x4e\x5a\x06\xb1\x5e\xa1\xd6\x64\x1f\x1e\xd9\xb3\xf0\xcb\x92\x68\x6b\x5c\x4e\x00\x9b\xb5\xba\x94\xac\x28\xfc\xf7\x5d\x37\x85\x43\x95\xbd\xeb\x81\x9c\xc7\xec\x0d\x75\xf3\xea\xd4\xe0\x11\x2d\x7a\x43\xa7\x04\xad\xdc\xde\x34\xd2\x37\xa1\x5d\xcd\xe3\x41\x56\x8a\x87\x07\x42\x42\x18\xdc\xd9\xa1\xe6\x9e\x69\x5f\xd7\x64\x7b\xd1\x7b\x75\xf3\x21\xf4\x26\x8b\x62\x6c\x03\x04\x69\xa8\xc5\x03\xed\x19\x2a\xb1\x56\x9c\xd1\x55\x46\x56\x3e\xd1\x6a\x6d\xcc\xdd\x31\xeb\xae\x8c\xc9\x08\x0f\xbb\xc8\x1e\xd4\xcb\x9e\x88\x19\x04\x32\xbb\x5e\xbe\x47\xf7\xed\x4c\x94\x37\xa4\x69\x83\xef\x4c\x9a\xb2\x4e\xcf\xc4\x7a\x8f\x6a\xcd\x9a\x96\x74\x34\xfa\x4e\x01\x32\x9a\xc5\x84\x88\x98\x1a\x9d\xf0\xb9\x72\x5d\x9b\x98\x66\x16\xf9\x7c\x9b\x2f\x7c\x96\x2d\x49\xd9\xb3\x35\xbc\x31\x5e\xe8\x35\xff\x38\x13\x66\xe9\x57\x9a\xa4\x33\x6e\x07\xa0\x7c\x32\xf6\x0e\xad\xf1\x3a\x76\xd3\xed\xd5\xf7\x29\x98\x47\x2a\x48\x48\xbd\xef\x78\x5f\xb5\x83\x0e\x81\x59\x28\xef\xd4\xe3\x84\x92\x85\xd6\xe2\x7d\x37\xbf\x85\xe5\x0d\x0a\xbd\xaa\xaf\x04\x03\x9b\x4a\x7a\x3c\x39\x1e\x2d\xc4\x09\xa7\xbd\xbd\xa8\x04\x40\x09\xf7\xc0\x09\x5c\x7c\x7e\x3e\xfe\xfd\xcb\xbf\xa3\xea\xcf\xc5\xf0\xda\x0d\x90\x6f\x73\xe6\xcd\x74\x79\xa5\x94\xf1\x7d\x4d\x80\xb4\xcf\xbb\x77\xc6\xa1\x6c\x36\xa3\x84\x49\xdd\xfc\xfa\xf6\x24\xba\xc5\xcd\x87\xd9\x49\x84\x67\x2b\x76\xb4\x47\x3f\xa6\xdc\x8c\x31\xd5\xc6\x09\x2b\xb7\xb0\x26\xee\xa1\xba\x7d\x78\x5d\x6f\xb6\xa6\xf8\x1a\xd9\x26\xf8\xe3\x6c\x3d\xae\xc3\x58\x57\xa0\xa2\x7f\x80\x8b\x8e\x64\x3d\xeb\xc4\xe2\xc0\x8b\x02\xeb\xd4\x92\x73\x03\x53\xb5\x9a\xa8\x48\xa6\x6b\x52\x77\x5d\xd5\xeb\x78\xb2\x7a\x9b\xf5\x54\xd1\xde\xc2\xf4\x88\x40\x6d\x82\xae\x02\x75\xd4\x6e\x99\x51\xe5\x28\x3a\xc8\x04\xcd\x18\xd5\x65\xef\xbd\x0b\x53\x73\x8d\x9b\xcf\x9a\x81\xfc\xea\x67\xb8\x1e\xed\x00\xaa\xc9\x98\x5a\xef\x04\x27\x4b\xb1\xd1\x24\x83\x3c\xde\x37\xb1\x08\x8a\x77\x27\xcc\x2c\x25\xdd\xde\xd4\x62\x56\x2e\x8c\x88\x4f\x1e\x5b\x94\xd1\x31\xb7\xde\x83\xda\xbf\xde\x70\xd8\x93\xed\x43\x7d\xf3\x9c\x36\x48\xc1\xd0\x5f\xbd\xab\x66\x52\x27\xa8\x63\xb4\xf1\x8e\x11\x24\x4c\x59\xec\xa2\x0e\xdc\xe3\x71\x0b\x90\xa1\x93\x5b\x8b\xda\x71\xf3\x04\xd5\x17\xac\x89\xb1\x39\xca\x04\xc2\x70\x3b\x16\xce\xe9\xa9\x41\x9d\x93\x73\x98\xf6\xf2\x79\xf4\xbc\x25\x74\x7d\x2d\xf1\x84\xe3\x5d\x91\x31\xe0\x78\x49\xf0\xb4\xc3\x47\x32\xf6\x58\xaa\x37\x73\xc8\x23\x73\x69\x4f\x52\xc7\x7f\xa0\xbc\xa5\x7b\xb7\xa8\x1e\x40\x7e\xf5\xd5\xa9\x53\xc7\x07\x8b\x55\x82\x4d\x40\xac\xaf\xc2\xc8\x89\xb1\x21\x26\x5a\x2b\x7e\xb5\x7d\x53\x6a\xa4\xab\x5d\x07\x7f\xfe\x35\xda\x79\x11\x95\xa2\x42\x28\xbe\x3e\x7c\xea\x7c\xf6\xac\xfc\x68\xde\x32\xcb\xcf\x56\x6e\xc2\xe7\x2f\xa3\x8a\x31\xc5\x1f\x9b\x57\xcb\xb0\xf8\x77\x00\x00\x00\xff\xff\x02\x5e\x6a\x81\x25\x16\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _previewAroOpenshiftIo_previewfeaturesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x6f\xe4\xb8\x11\xbe\xf7\xaf\x28\x38\x87\xb9\xb8\x65\x3b\x41\x06\x41\xdf\x1c\xcf\xce\xc6\xd8\xd9\x99\x81\x6d\x4c\x10\xc4\x39\x94\xa8\x92\xc4\x98\x22\xb5\x45\xb2\x7b\x7a\x83\xfc\xf7\xa0\x48\xa9\x5f\x96\x6c\x27\xd8\xf0\x24\xf1\x51\x8f\xaf\x9e\xe4\x62\xb9\x5c\x2e\xb0\xd7\xdf\x88\xbd\x76\x76\x05\xd8\x6b\xfa\x1e\xc8\xca\x9f\x2f\x9e\xfe\xe4\x0b\xed\x2e\xd6\x57\x8b\x27\x6d\xab\x15\xdc\x44\x1f\x5c\x77\x47\xde\x45\x56\xf4\x81\x6a\x6d\x75\xd0\xce\x2e\x3a\x0a\x58\x61\xc0\xd5\x02\x00\xad\x75\x01\x65\xda\xcb\x2f\x80\x72\x36\xb0\x33\x86\x78\xd9\x90\x2d\x9e\x62\x49\x65\xd4\xa6\x22\x4e\xc4\x47\xd6\xeb\xcb\xe2\x8f\xc5\xe5\x02\x40\x31\xa5\xe3\x0f\xba\x23\x1f\xb0\xeb\x57\x60\xa3\x31\x0b\x00\x8b\x1d\xad\xa0\x67\x5a\x6b\xda\xd4\x84\x21\x32\xf9\x62\xf8\x2f\x90\x5d\xe1\x7a\xb2\xbe\xd5\x75\x28\xb4\x5b\xf8\x9e\x94\x88\xd0\xb0\x8b\xfd\xee\xdc\xf3\x7d\x99\xf0\x20\x6d\xd6\xf4\x6b\xde\xfb\x31\xf3\x48\x0b\x46\xfb\xf0\xd3\xc4\xe2\x27\xed\x43\xda\xd0\x9b\xc8\x68\x9e\xc9\x97\xd6\xbc\xb6\x4d\x34\xc8\xa7\xab\x0b\x00\xaf\x5c\x4f\x2b\xb8\x31\xd1\x07\xe2\x05\xc0\x80\x48\x92\x67\x39\xe8\xbc\xbe\x42\xd3\xb7\x78\x95\x89\xa9\x96\x3a\xcc\xe2\x02\x88\x2a\xd7\x5f\x6f\xbf\xfd\xe1\xfe\x68\x1a\xa0\x22\xaf\x58\xf7\x21\xa1\x7b\x2c\x33\x68\x0f\xa1\x25\xc8\x47\xa0\x76\x9c\x7e\x07\xd9\x60\x10\x0e\xae\xbf\xde\xee\xa8\xf5\xec\x7a\xe2\xa0\x47\x9c\xf2\x38\xf0\x9d\x83\xd9\x13\xde\xef\x44\xbc\xbc\x0b\x2a\x71\x1a\xca\xdc\x07\x45\xa9\x1a\x34\x02\x57\x43\x68\xb5\x07\xa6\x9e\xc9\x93\xcd\x6e\x74\x44\x18\x64\x13\x5a\x70\xe5\x3f\x49\x85\x02\xee\x89\x85\x0c\xf8\xd6\x45\x53\x89\xaf\xad\x89\x03\x30\x29\xd7\x58\xfd\xeb\x8e\xb6\x87\xe0\x12\x53\x83\x81\x06\x83\xed\x87\xb6\x81\xd8\xa2\x81\x35\x9a\x48\xe7\x80\xb6\x82\x0e\xb7\xc0\x24\x5c\x20\xda\x03\x7a\x69\x8b\x2f\xe0\x67\x27\x38\xda\xda\xad\xa0\x0d\xa1\xf7\xab\x8b\x8b\x46\x87\x31\x66\x94\xeb\xba\x68\x75\xd8\x5e\x24\xf7\xd7\x65\x0c\x8e\xfd\x45\x45\x6b\x32\x17\x5e\x37\x4b\x64\xd5\xea\x40\x4a\x80\xbe\xc0\x5e\x2f\x93\xe8\x36\xc5\x4d\xd1\x55\xbf\xe3\x21\xca\xfc\xbb\x23\x59\xc3\x56\x9c\xc5\x07\xd6\xb6\x39\x58\x48\x5e\xfb\x82\x05\xc4\x71\xc5\xe8\x38\x1c\xcd\x5a\xec\x81\x96\x29\x41\xe7\xee\x87\xfb\x07\x18\x59\x27\x63\x9c\xa2\x9f\x70\xdf\x1f\xf4\x7b\x13\x08\x60\xda\xd6\xc4\xd9\x88\x35\xbb\x2e\xd1\x24\x5b\xf5\x4e\xdb\x90\x7e\x94\xd1\x64\x4f\xe1\xf7\xb1\xec\x74\x10\xbb\xff\x12\xc9\x07\xb1\x55\x01\x37\x29\x91\x40\x49\x10\xfb\x0a\x03\x55\x05\xdc\x5a\xb8\xc1\x8e\xcc\x0d\x7a\xfa\xbf\x1b\x40\x90\xf6\x4b\x01\xf6\x6d\x26\x38\xcc\x81\xa7\x9b\x33\x6a\x07\x0b\x63\x6a\x9a\xb1\xd7\x71\xb4\xde\xf7\xa4\x8e\x02\xe7\x34\x4e\x25\x7e\xaf\xef\xbe\x1c\xd1\x9b\x8e\x57\x19\xd6\x37\x1f\x8d\xdb\x7c\x72\xcd\xb3\xa5\x13\x31\x3e\xdf\xff\x38\xee\x4c\x59\x1c\xb5\x4d\x1f\xb5\x6e\x22\xa7\xd8\x4c\xac\x3f\xdf\xff\x08\xb5\x71\x1b\x30\xae\xf1\xc5\x33\x92\x00\x5f\x3a\x3d\x58\xff\xe8\xac\xae\x61\xeb\x22\x54\xce\xbe\x0b\xb0\x41\xbb\xdb\x33\x94\x0b\x09\x59\x09\x3c\xab\xb4\xa1\x09\xb2\xaf\xf0\x9d\x47\x40\x06\x59\x2c\x0d\x55\x53\x4b\xa7\xc1\xf3\x43\xde\x7a\x64\x82\x92\x5a\x5c\x6b\x17\x39\x27\x2d\xda\x0b\xca\xd3\x24\x01\x36\x2d\x59\x08\x1c\xe9\x54\xcd\x8d\x36\x06\x02\x6f\xb3\xbe\xa8\xda\xb4\xa1\x22\xaf\x99\xaa\x63\xcc\xce\x5f\xa2\x5d\xa3\xf1\x04\x3a\x1c\x11\xac\xb4\x17\xe9\x13\xc9\x3d\x58\xef\x26\xe9\x64\x67\x2d\x9d\x33\x84\xa7\x69\x57\x06\x53\xc8\x01\x32\x87\x5a\x8d\xd1\x84\x15\xfc\xfe\xea\xfd\x65\xfb\x3a\xb0\x77\x23\x39\xe8\x89\xb5\xab\x92\x33\x49\x08\x4d\xf9\xd0\x6c\xdc\x8d\xc3\x07\xc7\xd8\xd0\xb5\x52\x2e\xda\x30\x36\x29\xb7\x6f\xb1\xf0\xfd\xf4\xd1\x0f\x63\x55\x29\x69\xb0\x7d\x25\x3e\xfb\xe7\xbf\x7d\x59\x0e\x27\x66\xac\x81\x99\x90\x24\xdc\xe8\x25\x71\xfd\x1c\x7d\xca\x64\xda\x26\x3b\x78\xec\xc4\x61\x1a\x51\xdd\xd5\x3b\xb3\xfc\x4f\x6a\x07\xc6\xba\xd6\xea\xda\xa2\xd9\x06\xad\xfc\xad\x94\xb2\x35\x9a\x57\x4c\xf4\xfe\xb2\x7b\x83\xe7\x8f\xc4\x00\x03\x6c\x5a\x2d\x9e\xe9\xc4\x21\xab\xa8\x42\x16\x1b\x47\xbe\x05\x7c\x4b\x85\x71\xce\xfb\xdf\x5f\x76\xe7\x70\x75\xd9\x15\xf0\xe1\x40\x86\x19\x47\x24\x1b\xbb\x69\x42\xcb\x59\xc9\x97\x42\xfd\xb7\x40\xf0\x93\x6b\x76\xdf\x7f\x75\xfc\xe4\x7b\x7c\xa3\x1f\xdd\xd1\x2f\x31\xc5\xac\x38\xf2\xc3\x09\xd9\x49\x2f\x98\x01\xeb\x37\xf2\x8d\xf5\x54\x6b\xb6\x97\x7c\x8c\xd6\xd7\x15\x3b\xed\xde\x06\xc2\x22\xe0\x61\x12\x9e\x16\xf2\x25\x63\x5e\xcd\xcc\x4f\xcb\x94\xd5\x95\x66\xad\x49\x9d\xf2\xf1\xe0\x01\xfd\xe7\xbc\x96\x63\xb6\x7f\xb6\x32\x53\x9e\xe7\xeb\x76\xc0\x10\xfd\xdb\x2b\x77\xda\x7e\x54\x38\x5c\xe9\xa5\x5f\xaa\x12\x29\x12\x04\x27\xee\x1a\xe3\x98\x2f\x61\x12\x84\xfa\xe0\x92\x35\x2b\xd0\xcd\x6e\xe3\xd0\xff\x51\x10\xa6\xbb\x69\xd0\xd6\x07\xb4\x8a\x26\x2a\xa8\x0e\xd4\x4d\x06\xf4\x11\x87\xb3\x3d\xad\x7d\x5b\x98\x7b\x74\x51\x35\xd7\xfa\xc3\xae\xfd\xdd\x69\x53\xb9\xc7\x96\x8a\x43\x81\x91\x49\x4e\xed\x6e\xa4\xd0\x91\x6a\xd1\x6a\xdf\x25\x27\xb0\x15\x55\x92\x90\xa4\x45\xf4\x13\xc6\x85\x5d\xd1\x4d\xe5\x34\xa0\x36\x7e\x27\xc8\x5e\x34\xe1\x22\x9d\x26\x42\xcf\xda\xb1\x86\x27\xeb\x36\x16\x1c\xc3\x46\xb2\xff\x24\xd9\xb4\xbf\xef\x4d\x2a\xb1\x68\xcc\x1e\xc5\xc4\x00\x1a\xbd\x26\x0b\xd2\x75\x17\xf0\x68\x0f\x75\xca\x25\x65\x92\x68\x49\x80\xd5\xa0\x13\x7d\xef\x8d\x56\x3a\x98\x6d\xbe\xd3\x6c\x0f\x7c\x01\x42\x8b\x41\x54\x66\x9f\x6e\x2a\xca\x75\xbd\xb3\x82\xfa\x24\x59\x95\x60\x2c\x5d\x0c\xc0\x18\xda\xd4\x9f\xa3\x1d\xc2\x25\x37\xfe\xce\xd3\x11\x7d\x97\xd3\x54\x4d\xcc\x33\xb8\xa6\xee\xde\x25\x6a\x07\x58\xfa\x02\xbe\x58\xb5\xab\x96\xe7\x09\xf9\x8e\xd0\x0a\x9b\x04\xcc\x0e\x89\x19\x51\x2d\x0c\x4d\xbf\x18\xba\xa1\x0a\x90\x4b\x1d\x18\x59\x9b\x2d\x2c\xa5\xb9\x29\x49\xb9\x8e\x3c\xf4\xc8\x61\x6c\xbe\xae\xbf\xde\xa6\x4b\xdb\x24\xd1\x16\xfd\xbe\xea\x96\xa8\x9e\x36\xc8\x95\x5f\x26\xe8\x6a\xc7\xf9\x4f\x30\xc4\xa0\x4b\x6d\x74\x48\x90\x2b\x62\x2b\xc6\x9c\x24\x89\x76\x3b\x28\x7f\x22\x45\x71\x36\xb1\xff\xe5\x46\x14\xc0\xa0\x0f\x0f\x8c\xd6\xeb\xf1\xd9\x63\xae\x88\xd6\x8e\x3b\x0c\x2b\x69\x92\x68\x19\xf4\x6c\xfd\x78\xa5\x2e\xc8\x65\xc5\x7b\x6c\x66\xf9\xbc\x7a\x9e\x09\xfd\x5c\x61\x99\x4b\x40\x77\xe9\x8c\x64\xa1\x93\xe0\x45\x70\x96\x96\x1b\xc7\xd5\xf9\xfe\x7e\x37\x43\x1a\x4e\x1e\x07\x46\xec\x15\x06\x6a\x1c\x6f\xe5\x5f\x61\xf4\xb4\x5b\x88\xcc\x64\xc3\x90\xb9\xa7\x2b\x94\x8c\xdb\x30\x21\x99\xa4\x15\x29\xd7\xa9\xb5\x17\x9a\x31\xf4\x31\x9c\x83\x8f\xaa\x05\xf4\x49\x6e\xa3\xed\xbc\xb0\x4f\xb1\x24\x15\x0c\x34\x92\x75\x87\xc3\xe2\x77\xda\x82\x8f\x5d\x87\xac\x7f\x4d\xa1\xa1\xb2\x98\x43\xfe\x48\x0a\xcc\xca\xfa\xaa\x71\xa6\x8a\xd4\x7f\x71\x3c\x6d\x78\x8b\x65\xf7\x89\xff\x61\xdb\xef\xde\x94\xe4\xf8\x0e\xfc\x5d\x65\x98\x0b\x4e\x19\x72\x70\xdb\x6b\x85\xc6\x6c\x25\x45\x8c\x2e\x50\x81\xf8\x84\x24\x62\xdf\x3a\x0e\xd0\xb7\x9c\x2e\xfe\x87\x09\x75\x96\x68\xba\xbe\x8f\x0d\xbc\xb6\x95\x16\x0f\x19\x8a\xee\xd0\x80\x3d\x9e\x61\x69\x25\xa2\xcc\x52\xae\x65\x8f\x67\xd0\x3b\x83\xac\xc3\x76\xde\x4d\x3e\x3a\x06\xfa\x8e\x5d\x6f\xe8\x5c\x2e\x03\xc7\x5a\x8e\x7c\x7c\xae\x3b\x28\x04\xb5\xda\x66\xcf\x5a\xa3\xd1\xd5\xdc\x05\x0e\x06\x89\xb4\x87\xb4\xef\xf1\x0c\x14\xfa\x04\x6a\xcf\xae\xc4\x52\x4a\x4d\x2b\x85\x8a\xbb\x73\xf0\xee\x98\xf1\x2c\xd1\xfd\x05\x46\xd0\xa5\x0a\x1e\xcf\x6e\xed\xc0\x60\x32\x57\xc1\xeb\x1e\x32\xdf\x67\x49\xa7\x95\x9d\x6f\x72\x49\xe8\x4e\xf5\xdf\x73\x3d\xd8\x7e\x11\x99\x71\x7b\xfa\x12\xd5\x13\x63\x70\x3c\xf9\xfe\xf8\x8a\x1a\x4c\xd5\x5f\x30\xfc\x44\x5b\xff\x35\xe7\x92\xe7\xa7\x67\x7b\x9f\x17\xd1\x99\x13\x77\x52\xc7\x67\x93\xb9\x33\x5c\xa5\x47\x82\x3c\x91\xaf\x99\x87\x33\xb1\xdc\xbd\x0c\x8e\xd2\x0d\xf1\x0e\xff\xfa\xf7\x62\x1f\xfa\xa8\x14\xf5\x81\xaa\xcf\xa7\x4f\xdb\x67\x67\x47\xaf\xd5\xe9\xf7\xa0\x9b\x84\xbf\xff\x63\x91\x19\x53\xf5\x6d\x7c\x89\x96\xc9\xff\x04\x00\x00\xff\xff\xf9\x6e\xf5\xe0\x2c\x18\x00\x00")

func previewAroOpenshiftIo_previewfeaturesYamlBytes() ([]byte, error) {
	return bindataRead(
		_previewAroOpenshiftIo_previewfeaturesYaml,
		"preview.aro.openshift.io_previewfeatures.yaml",
	)
}

func previewAroOpenshiftIo_previewfeaturesYaml() (*asset, error) {
	bytes, err := previewAroOpenshiftIo_previewfeaturesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preview.aro.openshift.io_previewfeatures.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml":                aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":                        masterDeploymentYaml,
	"master/rolebinding.yaml":                       masterRolebindingYaml,
	"master/service.yaml":                           masterServiceYaml,
	"master/serviceaccount.yaml":                    masterServiceaccountYaml,
	"namespace.yaml":                                namespaceYaml,
	"preview.aro.openshift.io_previewfeatures.yaml": previewAroOpenshiftIo_previewfeaturesYaml,
	"worker/deployment.yaml":                        workerDeploymentYaml,
	"worker/role.yaml":                              workerRoleYaml,
	"worker/rolebinding.yaml":                       workerRolebindingYaml,
	"worker/serviceaccount.yaml":                    workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"preview.aro.openshift.io_previewfeatures.yaml": {previewAroOpenshiftIo_previewfeaturesYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
