// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x41\x73\xeb\xb8\x0d\xbe\xfb\x57\x60\xd2\xc3\x3b\x34\x56\xde\x9b\xbd\xb4\xbe\x65\xf2\x76\x3b\x99\x6e\x77\x33\x2f\x99\x77\xd9\xec\x01\xa2\x60\x09\x0d\x45\xaa\x24\x94\x3c\xbf\x4e\xff\x7b\x07\xa4\x64\xcb\x8e\x14\xa7\x9d\x59\x5d\x3c\x02\x49\x00\xfc\x00\x7c\x80\xb5\x5a\xaf\xd7\x2b\xec\xf8\x2b\x85\xc8\xde\x6d\x00\x3b\xa6\x6f\x42\x4e\xdf\x62\xf1\xf4\x97\x58\xb0\xbf\x7a\xfe\x54\x92\xe0\xa7\xd5\x13\xbb\x6a\x03\x37\x7d\x14\xdf\x7e\xa1\xe8\xfb\x60\xe8\x33\x6d\xd9\xb1\xb0\x77\xab\x96\x04\x2b\x14\xdc\xac\x00\xd0\x39\x2f\xa8\xe2\xa8\xaf\x00\xc6\x3b\x09\xde\x5a\x0a\xeb\x9a\x5c\xf1\xd4\x97\x54\xf6\x6c\x2b\x0a\xc9\xc2\x68\xff\xf9\x63\xf1\x43\xf1\x71\x05\x60\x02\xa5\xe3\x0f\xdc\x52\x14\x6c\xbb\x0d\xb8\xde\xda\x15\x80\xc3\x96\x36\x60\x6c\x1f\x85\x42\x2c\x30\xf8\xc2\x77\xe4\x62\xc3\x5b\x29\xd8\xaf\x62\x47\x46\x6d\xd6\xc1\xf7\xdd\x06\x5e\xad\x67\x0d\x83\x5b\xc3\x95\xb2\xb2\x24\xb1\x1c\xe5\xef\x53\xe9\xcf\x1c\x25\xad\x74\xb6\x0f\x68\x0f\xa6\x93\x30\xb2\xab\x7b\x8b\x61\x2f\x5e\x01\x44\xe3\x3b\x9a\x6a\x8d\x7d\x19\x06\xbc\x06\xbb\x51\x50\xfa\xb8\x81\x7f\xff\x67\x05\xf0\x8c\x96\xab\x74\xdb\xbc\xa8\xee\x5e\xdf\xdd\x7e\xfd\xe1\xde\x34\xd4\x62\x16\x02\x54\x14\x4d\xe0\x2e\xed\x1b\x95\x03\x47\x90\x86\x20\xef\x84\xad\x0f\xe9\x75\x74\x11\xae\xef\x6e\x87\xd3\x5d\xf0\x1d\x05\xe1\xd1\x03\x7d\x26\x91\xdf\xcb\x4e\xec\x7c\x50\x47\xf2\x1e\xa8\x34\xd6\x94\x0d\x0e\x11\xa3\x0a\x62\x36\xed\xb7\x20\x0d\x47\x08\xd4\x05\x8a\xe4\x72\xf4\x27\x6a\x41\xb7\xa0\x03\x5f\xfe\x93\x8c\x14\x70\x4f\x41\x95\x40\x6c\x7c\x6f\x2b\x4d\x90\x67\x0a\x02\x81\x8c\xaf\x1d\x7f\xdf\x6b\x8e\x20\x3e\x99\xb4\x28\x34\x84\x62\x7c\xd8\x09\x05\x87\x56\x21\xec\xe9\x12\xd0\x55\xd0\xe2\x0e\x02\xa9\x0d\xe8\xdd\x44\x5b\xda\x12\x0b\xf8\x87\x0f\x04\xec\xb6\x7e\x03\x8d\x48\x17\x37\x57\x57\x35\xcb\x98\xeb\xc6\xb7\x6d\xef\x58\x76\x57\x29\x63\xb9\xec\xc5\x87\x78\x55\xd1\x33\xd9\xab\xc8\xf5\x1a\x83\x69\x58\xc8\x48\x1f\xe8\x0a\x3b\x5e\x27\xc7\x5d\x4a\xf5\xa2\xad\xfe\xb4\x0f\xf4\x87\x89\xa7\xb2\xd3\x84\x88\x12\xd8\xd5\x7b\x71\xca\xbd\x45\xdc\x35\x07\x35\xba\x38\x1c\xcb\xfe\x1f\xe0\x55\x91\xa2\xf2\xe5\xc7\xfb\x07\x18\x8d\xa6\x10\x1c\x63\x9e\xd0\x3e\x1c\x8b\x07\xe0\x15\x28\x76\x5b\x0a\x39\x70\xdb\xe0\xdb\xa4\x91\x5c\xd5\x79\x76\x32\x64\x12\x93\x3b\x06\x3d\xf6\x65\xcb\xa2\x91\xfe\x57\x4f\x51\x34\x3e\x05\xdc\xa4\x8a\x87\x92\xa0\xef\x2a\x14\xaa\x0a\xb8\x75\x70\x83\x2d\xd9\x1b\x8c\xf4\x87\xc3\xae\x08\xc7\xb5\x42\x7a\x1e\xf8\x29\x51\x1d\x6f\xcc\x68\xed\xc5\x23\x95\xcc\x46\x68\xa8\xc0\xfb\x8e\xcc\x51\x65\x54\x14\x39\x68\xf6\x0a\x0a\x69\xce\x4f\xd9\x65\xb9\x16\x53\x3d\x9a\xf0\xd9\xb7\xc8\xee\x58\xbc\x70\x8d\xe1\xc4\x2f\xca\x87\xef\xde\xff\xfd\x47\xf7\xcc\xc1\xbb\x96\x9c\xbc\xfb\xd4\x96\x50\x71\x8f\xa7\x07\x8e\xf0\xf8\x69\xd8\x74\x04\xc8\xf5\x97\x5f\x95\xce\x02\x8a\x0f\xa3\x1a\xa8\xb5\x90\x4f\x54\x2d\x41\x92\xd6\x94\x6b\xa2\x90\x93\xbb\xe0\x5b\x92\x86\xfa\x99\x5d\xa3\xff\xa5\xf7\x96\xd0\xcd\xde\xed\x24\xbe\xfa\xd4\xe4\xe8\x19\x7f\xf6\x75\xcd\xae\x3e\xd5\xfa\x96\x57\xc6\xbb\x2d\xd7\x33\xfc\xb9\x3f\x8c\xa2\xec\xb4\x81\x0f\xbf\x7d\x5c\xff\xf5\xf7\x3f\x17\xf9\xe7\xc3\xa2\xe7\x33\xc8\xeb\xd3\x7a\xc7\xe2\x75\xe9\x6f\x37\xf7\x6f\x84\x4f\x1f\x72\x7d\x3b\x27\x5f\xc3\x67\xc6\xda\xf9\x28\x6c\xe2\x5d\xf0\xd5\xec\x9e\x87\x53\x7e\x3d\xeb\xdd\x22\xac\x99\x99\x49\x6e\x1a\x32\x4f\x14\xfe\x17\x60\xfb\x60\x67\xc3\xcb\x42\xed\xec\xc2\x19\xfc\xc6\x65\x0c\x01\x77\xef\xf5\xdf\x7a\x33\xe9\xc8\xef\xb0\x34\x52\xf0\x6d\xf5\x66\x95\x8c\x73\xd3\xed\xe7\xb1\x75\x5f\x7f\xd7\x9a\x38\x1c\xcf\x9d\x94\x26\xf3\xc4\xbb\xec\x3f\x3b\x92\xd7\xb6\x17\xb6\xcf\xb3\x5d\x9e\x49\xce\xf1\x5d\xda\x75\xc4\x78\xbe\x8c\xda\x52\xfe\x2f\xca\x33\xde\x55\x3c\x99\x13\x97\x8c\xef\xb7\x0d\x3d\x91\x24\xd9\x19\xc5\xc0\x2e\x0a\x3a\x43\xb1\x38\x51\xb3\x90\x35\x47\xda\x2f\x0e\x7a\x0e\x8d\x32\xcf\x2a\x7a\xb3\x94\x08\x47\xd3\xcb\x87\x98\xef\x7a\x6a\x4c\x9f\x89\xab\x18\x48\xcf\xec\x27\x6a\x68\xc9\x34\xe8\x38\xb6\xa9\x3e\x5c\x45\x95\x0e\x37\xda\x34\x23\x55\xf0\xd2\x90\x53\x40\x67\x94\x56\x24\xc8\x36\xee\x9d\x38\xb8\xa5\x36\xb4\xf3\x22\x74\x81\x7d\x60\x78\x72\xfe\xc5\x81\x0f\xf0\x92\xe6\xaa\xb4\xd6\x75\xf6\x34\xf3\x53\x1a\x78\x40\x6b\x0f\xd8\x25\xf5\x50\xf3\x33\x39\xd0\xf9\xa3\x80\x47\x37\xbd\xcf\x30\xaa\x95\x04\x58\x55\x34\xc7\x21\xe2\x81\xbe\x75\x96\x0d\x8b\xdd\xe5\x99\x6e\x37\x89\x3d\x48\x83\xa2\x97\x0d\x31\xcd\x6a\xc6\xb7\x9d\x77\x09\x6d\x93\xc0\x2a\x7d\x3f\xc7\x40\x01\xa5\x49\x73\x0a\xba\x34\x76\x70\xc8\xe3\x8f\x8f\x74\xa4\x3d\x61\x99\x66\x1a\xed\xc0\x69\xa2\xf1\x7a\x72\x46\xe5\x04\xc3\x58\xc0\xaf\xce\xd0\x90\xd3\xd5\x65\x4a\xea\x96\xd0\xa9\x91\x04\xc9\x21\x3f\x0c\x3a\xc8\x83\xce\x8c\x4e\x0d\x6e\x4d\x15\x60\x28\x59\x02\x06\xb6\x3b\x58\x03\xeb\x6e\xe3\x5b\x8a\xd0\x61\x90\xb1\xbe\xaf\xef\x6e\xf3\xc0\xda\x60\x2e\xa3\x88\xed\x9c\xd2\x12\xcd\xd3\x0b\x86\x2a\xae\xd3\xee\xad\x0f\xf9\x4d\xb1\x43\xe1\x92\x2d\x4b\x82\xda\x50\x70\x43\x86\xec\xf2\xb5\x93\xbd\xb9\xbb\xef\x3d\x28\x2e\x5e\x77\xdb\x37\xa8\x19\xc0\x62\x94\x87\x80\x2e\xf2\xf8\xef\x6c\x9e\x91\xb7\x3e\xb4\x28\x1b\xd0\x59\x70\x2d\x3c\x7b\xb3\xb3\xbc\xdd\x52\x8c\x58\x2f\x58\x38\x73\x36\x10\xc6\xf9\xbe\xbc\x44\x2d\x5f\xd2\x09\xe5\x97\x93\xe2\x44\xf0\x8e\xd6\x2f\x3e\x54\x97\x87\x89\x76\x56\x31\x9c\xfc\xfd\xd9\x73\x39\x0a\xd5\x3e\xec\xf4\xdd\x60\x1f\x69\xbf\xd0\x87\x40\x4e\x06\xee\x9d\xa3\x13\x7d\x6e\x65\xc6\xab\x44\x19\xec\x52\xe4\x59\x35\xf6\xd2\xf5\x72\x09\xb1\x37\x0d\x60\x4c\x3e\x5b\x76\x4b\x8e\xea\x3f\x70\x23\x16\x6a\x65\xd2\xe1\xa8\xe6\x17\x3b\x88\x7d\xdb\x62\xe0\xef\x29\xfd\x4d\x76\x71\x60\x87\xe4\xfc\x82\x9f\x67\x02\xf2\xba\xbd\xbc\xfb\x68\x5a\x3e\x1f\xc9\x03\x8d\x3f\xec\x3a\x1a\xfb\xab\x1e\xde\xc3\xbd\xaf\xe3\x74\xd5\xd3\x21\x74\x62\x8f\x0d\x5a\xbb\xd3\xd2\x1f\x03\x5e\x81\x66\x80\x12\x6b\x6c\x7c\x10\xe8\x9a\x90\xfe\xd8\x4c\x29\x32\x19\x5b\xd2\x3a\xb0\x27\xbb\x8a\x35\x1f\x86\x6e\xc9\x89\xf2\xe1\xf1\x02\x4b\xa7\x35\x63\xd7\x12\x7a\x7a\xbc\x80\xce\x5b\x0c\x2c\xbb\x02\x7e\xf2\x73\x04\xa6\x0f\x7d\xc3\xb6\xb3\x74\x09\x7c\x7a\xbf\xd1\x4a\xcc\x5d\x05\x55\x1d\x9b\x5d\xce\xa3\xf4\xc1\xe1\x72\xe9\xf2\xc9\x1b\x8e\xf9\xb3\xc4\xe3\x05\x18\x8c\x09\xcc\x2e\xf8\x12\x4b\xbb\x4b\x3b\xd4\xd7\x4b\x88\xfe\xd8\xec\xdb\x37\x2f\xb5\x10\xac\xa5\x0a\x1e\x2f\x6e\xdd\xa0\x7e\x86\x81\xe0\x5c\x46\xe4\x16\x40\xaf\xa6\x1d\x9d\x61\x73\x9a\xcd\x2c\xa8\xc6\x57\xe2\xc5\xf9\x6f\x79\x68\x1c\xff\xce\x2c\x4c\xfe\xef\x9f\xb8\x4e\x44\x87\x6f\x60\x9f\xd0\x76\x0d\x7e\x3a\xc8\x52\xd5\xac\x87\x2f\x5f\x93\x65\x80\x3c\x78\x6d\x40\x73\x66\xf8\xb0\xe4\x83\x52\x66\x96\x1c\x6a\x0e\x8d\xa1\x4e\xa8\xfa\xe5\xf4\xdb\xd7\xc5\xc5\xd1\xc7\xad\xf4\x3a\x19\xca\xe0\xb7\xdf\x57\x59\x2b\x55\x5f\x47\x6f\x54\xf8\xdf\x00\x00\x00\xff\xff\xe6\x41\x09\x04\x3b\x14\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\xd0\x92\x28\xce\x06\x64\x3c\x19\x7c\x8f\xef\x3d\xd2\xc2\x1c\x7e\x91\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\xca\x80\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x3e\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x4c\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe7\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x4e\xcd\x6f\x53\x2a\xde\xe4\xb9\x9b\x08\xe0\xb2\x65\x29\xcf\xc9\x30\x24\x92\x3a\xdc\x82\xe7\x61\xc0\xd4\x5d\xd5\xda\x22\x75\xd5\x96\xbd\xce\xb1\x7a\xbd\x6b\x6b\x66\x56\x2a\x0c\x58\xd6\x7b\x5b\xad\x57\x3f\x5e\x7e\xae\x5e\x2b\xf0\xef\xff\xaa\x50\x66\xb1\x1b\x9b\x9a\xf4\x9d\xc5\x1c\x3c\x2f\x9f\x97\x15\xbd\x28\xf5\x66\xb9\x36\x63\x38\x52\x22\xd5\x77\xe1\x2d\xb9\x19\xb7\xb0\xde\xc8\xe6\x2d\x80\x8c\xd6\x3b\x58\xf4\x84\xd1\xfa\xaf\x85\x10\x76\xd3\x2d\xe1\x6f\xdb\xc4\x1d\x6d\x6e\x9e\xc6\xa5\xdb\x0a\x47\x7a\x3c\x8c\x5b\x92\x44\x46\xfa\x18\x78\x71\x3a\x89\x83\x87\x87\x33\x55\x49\x8e\xc1\xd3\x8b\xf7\x3c\x26\x5b\xdf\x79\xb9\x7f\xdc\x25\xb0\x04\x9b\xbe\x45\x54\x3d\x91\x75\x52\xa3\xa1\xf5\x71\x2c\xbc\xd6\x4b\xb0\xe0\x31\x9e\x07\x8c\x63\xd1\x09\x9c\x66\x7f\xf6\x40\x93\xfb\x4f\xc2\xba\xc8\x25\x87\x83\xd5\x67\x50\xd3\x0a\xd0\x6e\x47\xde\x1c\xac\x79\xe3\x7b\xea\xc6\x48\xcd\xef\x00\x00\x00\xff\xff\x33\xe2\xa4\x2c\xd0\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xb9\x55\xbe\xbe\x50\x65\xcb\x32\x0a\x98\x27\x61\x38\xc3\x19\x2e\xc5\x35\xfc\x84\x68\x28\xd9\x11\xd7\xaa\x9b\xe3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x98\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7d\xd1\x24\x70\xc4\x52\xda\x52\x21\x6c\x45\xda\xdf\x45\x0e\x90\x86\x28\x73\xc2\xad\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x97\xb5\xfc\x39\x08\x16\x72\xa3\x15\x7e\x32\x11\xd4\x18\x3c\xab\xa3\xc7\x86\x48\x11\xe1\xad\xc8\x6c\x9f\xd8\x7c\xff\x75\x95\xe7\x66\x22\x35\x61\xc3\x7e\x9c\xa9\x52\x62\x0c\x79\xff\x51\x3b\x36\x9c\xd5\x89\xff\xbc\x0f\xb2\xc7\x6c\x76\x42\x3e\x32\x1f\x39\x44\xde\x45\x38\x7a\x68\x88\x0c\xa9\xc6\x45\xb5\x7e\x9b\xa9\xe2\x55\x9e\x9b\x89\x88\xce\x5b\x4e\xe5\x4b\x36\x0e\x19\xb2\x88\x5b\xf2\x25\x25\xce\xdd\x65\x5a\x3b\x8d\xba\xcc\x96\xbd\xae\x7b\xcb\xeb\x5d\xa0\x95\xd9\x54\x21\xf1\xb4\xde\xeb\xf6\x6d\xfb\xfd\xf9\xc7\xf6\x65\x69\xfc\x7f\xaf\xa5\x15\xc3\x11\x19\xaa\xdf\xa4\xec\x70\xb1\x23\xea\xcd\xea\x2b\x6c\x0d\x11\x55\xb6\xde\xd1\xa6\x07\x47\xeb\x3f\x37\x02\xee\xc6\x6b\x42\x11\x73\xf4\xf4\xf0\xf4\x70\x82\x73\xe9\xf0\x7e\x75\xd8\x33\xda\x4a\x89\xb8\x3f\x0c\x3b\x48\x86\x41\xef\x43\xd9\xcc\x0b\x39\xba\xbb\x3b\x51\x15\x72\x0c\x1e\xcf\xde\x97\x21\xdb\xdb\x8d\xff\xee\x9f\xbb\x84\x22\xc1\xc6\x2f\x91\x55\x67\xb2\x8e\x6a\x48\xad\x8f\x83\x1a\xa4\xf5\x12\x2c\x78\x8e\xcd\xdf\x00\x00\x00\xff\xff\xce\x78\x87\x64\x1b\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
