// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x6e\xe3\xc8\x11\xbe\xeb\x29\x0a\xce\x61\x0e\xb1\xe8\x19\x04\x01\x12\xdd\x0c\xcf\x6e\x22\xec\x26\x6b\x8c\x8d\xb9\xac\xf7\x50\x6c\x96\xc8\x8a\x9b\xdd\x4c\x77\x51\x1e\x4d\x90\x77\x0f\xaa\x49\x4a\x94\x44\xca\xf6\x02\xe1\x45\x60\xff\xd4\x7f\x7d\xf5\x51\x8b\xe5\x72\xb9\xc0\x86\xbf\x52\x88\xec\xdd\x0a\xb0\x61\xfa\x26\xe4\xf4\x2d\x66\xcf\x7f\x89\x19\xfb\x9b\xed\xa7\xc5\x33\xbb\x62\x05\x77\x6d\x14\x5f\x7f\xa1\xe8\xdb\x60\xe8\x33\x6d\xd8\xb1\xb0\x77\x8b\x9a\x04\x0b\x14\x5c\x2d\x00\xd0\x39\x2f\xa8\xcb\x51\x5f\x01\x8c\x77\x12\xbc\xb5\x14\x96\x25\xb9\xec\xb9\xcd\x29\x6f\xd9\x16\x14\x92\xf0\x41\xf5\xf6\x63\xf6\xe7\xec\xe3\x02\xc0\x04\x4a\xd7\x1f\xb9\xa6\x28\x58\x37\x2b\x70\xad\xb5\x0b\x00\x87\x35\xad\xc0\xd8\x36\x0a\x85\x98\x61\xf0\x99\x6f\xc8\xc5\x8a\x37\x92\xb1\x5f\xc4\x86\x8c\xea\x2c\x83\x6f\x9b\x15\x9c\xed\x77\x12\x7a\xb3\x7a\x97\x3a\x61\x69\xc5\x72\x94\x9f\xc6\xab\x3f\x73\x94\xb4\xd3\xd8\x36\xa0\x3d\xa8\x4e\x8b\x91\x5d\xd9\x5a\x0c\xfb\xe5\x05\x40\x34\xbe\xa1\xb1\xd4\xde\xbd\xa4\x73\xd9\x3b\xb0\xfd\x84\xb6\xa9\xf0\x53\x27\xc5\x54\x54\x63\x67\x12\x80\x9a\x7b\x7b\xbf\xfe\xfa\xa7\x87\xa3\x65\x80\x82\xa2\x09\xdc\x48\x0a\x55\x2f\x1e\x38\x82\x54\x04\xdd\x59\xd8\xf8\x90\x5e\x07\x23\xe1\xf6\x7e\xbd\xbf\xdf\x04\xdf\x50\x10\x1e\xbc\xef\x9e\x51\xea\x47\xab\x27\xda\x3e\xa8\x41\xdd\x29\x28\x34\xe7\xd4\xa9\xed\x5d\xa3\xa2\xf7\x01\xfc\x06\xa4\xe2\x08\x81\x9a\x40\x91\x5c\x57\x05\x47\x82\x41\x0f\xa1\x03\x9f\xff\x8b\x8c\x64\xf0\x40\x41\xc5\x40\xac\x7c\x6b\x0b\x2d\x95\x2d\x05\x81\x40\xc6\x97\x8e\xbf\xef\x65\x47\x10\x9f\x94\x5a\x14\xea\x93\x72\x78\xd8\x09\x05\x87\x16\xb6\x68\x5b\xba\x06\x74\x05\xd4\xb8\x83\x40\xaa\x05\x5a\x37\x92\x97\x8e\xc4\x0c\xfe\xe1\x03\x01\xbb\x8d\x5f\x41\x25\xd2\xc4\xd5\xcd\x4d\xc9\x32\x94\xbc\xf1\x75\xdd\x3a\x96\xdd\x4d\xaa\x5e\xce\x5b\xf1\x21\xde\x14\xb4\x25\x7b\x13\xb9\x5c\x62\x30\x15\x0b\x19\x69\x03\xdd\x60\xc3\xcb\x64\xba\x4b\x65\x9f\xd5\xc5\x1f\x42\xdf\x24\xf1\xc3\x91\xad\xb2\xd3\xf2\x88\x12\xd8\x95\xa3\x8d\x54\x8b\x17\x32\xa0\x55\xa9\xd9\xc6\xfe\x6a\xe7\xc5\x21\xd0\xba\xa4\xd1\xf9\xf2\xc3\xc3\x23\x0c\xaa\x53\x32\x4e\xa3\x9f\xe2\x7e\xb8\x18\x0f\x29\xd0\x80\xb1\xdb\x50\xe8\x92\xb8\x09\xbe\x4e\x32\xc9\x15\x8d\x67\x27\x7d\x6d\x31\xb9\xd3\xf0\xc7\x36\xaf\x59\x34\xef\xff\x6e\x29\x8a\xe6\x2a\x83\xbb\x84\x03\x90\x13\xb4\x4d\x81\x42\x45\x06\x6b\x07\x77\x58\x93\xbd\xc3\x48\xff\xf7\x04\x68\xa4\xe3\x52\x03\xfb\xb6\x14\x8c\x21\xec\xf4\x70\x17\xb5\xd1\xc6\x00\x34\x33\xf9\xea\xfb\xf3\xa1\x21\x73\xd4\x31\x05\x45\x0e\x5a\xd3\x82\x42\xda\x09\x63\xf4\x19\x9e\xe9\x4e\xd5\x07\x4d\xf8\xec\x6b\x64\x77\xba\x31\xeb\x14\x74\x3d\xbe\x76\xb2\xbe\x7f\xdf\xa5\xef\x3f\xb8\x2d\x07\xef\x6a\x72\xf2\xae\x9b\xc5\xfb\x2d\xdc\x10\x6a\x16\xcf\xfc\x3d\x89\xea\x8f\xfd\xb1\xa3\xb0\xde\x7e\xf9\x45\x41\x33\xa0\xf8\x30\x08\x82\x52\x41\xe2\x4c\xd8\x7c\x60\xd3\xae\xa2\x59\x14\x72\x72\x1f\x7c\x4d\x52\x51\x3b\x79\x6e\xf0\x24\xf7\xde\x12\x9e\xa2\xdb\x6c\xc5\xe8\x53\x92\xa3\x2d\xfe\xec\xcb\x92\x5d\x79\x2e\xfb\xb2\x7d\xc6\xbb\x0d\x97\x93\x68\xbd\x17\x80\xa2\x38\xb8\x82\x0f\xbf\x7e\x5c\xfe\xf5\xb7\x3f\x66\xdd\xcf\x87\x0b\x5e\x4c\xe6\x43\x9f\xda\x3b\x16\xaf\x9b\x7f\xbb\x7b\xb8\x58\x0b\xfa\x90\x6b\xeb\xe9\x9d\x25\x7c\x66\x2c\x9d\x8f\xc2\x26\xde\x07\x5f\xcc\x9c\x7a\x3c\x47\xf5\x37\xd8\x79\x21\xd8\xec\xca\x40\x31\xbe\xb3\xee\xbb\x49\x42\x72\x57\x91\x79\xa6\xf0\xde\x24\xb5\xc1\xce\x14\x0d\x0b\xd5\x33\x5b\xaf\xe6\x62\x38\x80\x21\xe0\xee\x3d\x31\xb0\xde\xa4\x11\xfc\xae\x10\x0c\xe3\x63\x5d\xbc\xd2\x8f\x03\x0f\x5c\x7f\x1e\x88\xc8\xed\x77\xed\xbe\x83\x80\x8e\x11\xd0\x88\x1f\xbd\xd9\x8a\xad\x23\x99\xb2\x60\xf6\xca\x1c\x52\x0b\xca\x69\x23\x4f\x62\x75\x3a\x77\x84\xd6\x3e\x8f\x3a\x1a\x7f\x37\x5c\x1b\xef\x0a\x1e\xf1\xe0\x79\x13\xf6\x07\xfb\x19\x4f\x92\xb4\x0d\xcb\xc0\x2e\x0a\x3a\x43\x31\x3b\x13\x34\x5b\x57\x47\x1a\xae\x0e\xb2\x0e\xa3\xbf\xe3\x61\xea\x63\x2a\x92\x23\x66\xf6\xe1\x1c\x3e\x87\x68\x52\x36\x36\x18\x03\xe9\xad\xfd\x47\x03\xd4\x64\x2a\x74\x1c\xeb\xd4\x4b\xae\xa0\x42\xa9\x9b\xd2\x80\x48\xd3\xcd\xff\x52\x91\xeb\xc7\xa3\x20\xdb\xb8\x37\xe4\x60\x9a\x6a\x51\x36\x81\xd0\x04\xf6\x81\xe1\xd9\xf9\x17\x07\x3e\xc0\x8b\xf2\xc6\x49\xb1\xe9\x7c\xd3\xd8\x9d\xea\x47\x6b\x0f\x51\x4c\x0a\xa0\xe4\x2d\x39\x50\x66\x95\xc1\x93\x1b\xfb\xd4\x91\xd1\x49\xa1\x39\x01\x16\xbd\x4f\xf4\xad\xb1\x6c\x58\xec\xae\xe3\xad\xbb\x51\x2d\x80\x54\x28\xea\x72\x88\x89\x8d\x1a\x5f\x37\xde\x69\xd4\x27\xc5\x9a\x14\xc6\xdc\xb7\x02\x01\xa5\x4a\x1c\x0c\x5d\x22\x54\x1c\x3a\x72\xe7\x23\x1d\xc9\x4f\x31\x4d\x7c\x2d\xcc\xc4\x35\x31\x38\x9f\xa4\x8d\x62\x19\x33\xf8\xc5\x19\xea\x2b\xbd\xb8\x4e\x91\xaf\x09\x9d\xaa\x49\x81\xd9\x47\x62\xc6\x54\x07\x3d\xb1\xd3\x44\x97\x54\x00\x86\x9c\x25\x60\x60\xbb\x83\x25\xb0\xee\x19\x5f\x53\x84\x06\x83\x0c\x18\x70\x7b\xbf\x4e\xc4\x7c\x52\x68\x85\x5d\xcb\x45\xac\x09\x72\x34\xcf\x2f\x18\x8a\xb8\x4c\xa1\xdb\xf8\xd0\xbd\x69\x0c\x51\x38\x67\xcb\x92\x42\x6e\x28\x38\x4d\xe6\xa4\x48\x74\xbb\xde\xf9\x13\x2b\xb2\xab\xa9\xe9\x7f\x11\xd6\x01\x2c\x46\x79\x0c\xe8\x22\x0f\x5f\xa6\x73\x58\xbe\xf1\xa1\x46\x59\x81\x72\xde\xa5\x70\x4d\xbf\x17\xf3\x6b\x8a\x11\xcb\x59\x3d\xaf\xde\x0f\x84\x71\x8e\x29\xcc\x01\xd0\x97\x74\x47\x51\xe8\xa4\x79\x11\xbc\xa3\xe5\x8b\x0f\xc5\xf5\x81\xc3\xcf\x88\x86\x93\x0f\xc0\xfd\x14\x40\xa1\xd2\x87\x9d\xbe\x1b\x6c\x23\xed\x37\xda\x10\xc8\x49\x8f\xd5\xe7\x18\x37\x3c\x6b\x99\xb0\x4c\x61\x05\xd8\xa5\x7a\x60\x95\xd9\x4a\xd3\xca\x35\xc4\xd6\x54\x80\x31\xd9\x6d\xd9\xcd\x1b\xfb\xdc\xe6\x64\xc4\x42\xa9\xa8\xdb\x5f\xd6\xba\x63\x07\xb1\xad\x6b\x0c\xfc\x3d\xb5\x86\xe9\xcc\xec\xf1\x23\x39\x30\x6b\xeb\xab\xc9\x99\x1a\x4b\xef\xb8\x9e\x0e\xbc\x25\xb3\x07\xe0\x7f\xdc\x35\x34\xcc\x69\xbd\xbe\x0f\xfe\x7e\x32\xcc\x35\xa7\x3e\x7a\x71\xd7\xb0\x41\x6b\x77\x0a\x11\x43\x09\x14\xa0\x35\xa1\x40\x1c\x2b\x1f\x04\x9a\x2a\xa4\x8f\xbb\x31\xa0\xce\x0a\x4d\x9f\x68\xc3\xa7\x3f\xbb\x82\xb5\x42\xfa\x69\xcb\xdd\x48\x78\xba\xc2\xdc\x69\x47\xd9\xa5\x84\x96\x9e\xae\xa0\xf1\x16\x03\xcb\x6e\xbe\x4c\x7e\xf4\x01\xe8\x1b\xd6\x8d\xa5\x6b\xe0\x53\x2f\x07\x3d\xb1\x9b\x3b\xa8\x02\xd9\xec\xba\xca\xda\xa2\xe5\xe2\x7a\xde\xe0\x64\x11\x47\x48\xe7\x9e\xae\xc0\x60\x4c\x41\x6d\x82\xcf\x31\xd7\x51\x53\xe9\xa0\x0a\xf5\x35\x44\x7f\xac\x78\x56\x68\xef\xbf\xe2\x29\x5a\x4b\x05\x3c\x5d\xad\x5d\xaf\x60\x12\xab\xe0\xf5\x0a\xe9\x06\x07\x4d\xf0\x27\xe5\xda\x5d\xf1\x4d\x6e\xa9\xdc\x89\x8d\x0b\x1c\xf3\x12\x39\x1d\x3e\xcc\x66\xbf\x5a\x2e\xd2\xd0\xe2\xef\x28\x3f\xd1\x2e\xde\x77\x58\x72\x7e\x7b\x96\xfb\xbc\xe1\x9b\xe1\xdc\xdc\x49\x1f\xcf\x16\x3b\x4a\xb8\x02\xad\xc6\x6e\x41\x7c\x50\x98\x1e\xad\xb4\xf9\xfe\xdf\x9f\xc1\xba\xbe\xdf\xe1\x3f\xff\x5d\x1c\x5a\x1f\x8d\xa1\x46\xa8\xf8\xe7\xe9\x9f\x92\x57\x57\x47\xff\x3a\xa6\xd7\x11\x9b\x84\x5f\x7f\x5b\x74\x8a\xa9\xf8\x3a\xfc\xbf\xa8\x8b\xff\x0b\x00\x00\xff\xff\xeb\x70\xce\xfe\xcf\x15\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
