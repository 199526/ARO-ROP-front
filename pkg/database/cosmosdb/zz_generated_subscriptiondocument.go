// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"net/http"
	"strings"

	pkg "github.com/jim-minter/rp/pkg/api"
)

type subscriptionDocumentClient struct {
	*databaseClient
	path string
}

// SubscriptionDocumentClient is a subscriptionDocument client
type SubscriptionDocumentClient interface {
	Create(string, *pkg.SubscriptionDocument, *Options) (*pkg.SubscriptionDocument, error)
	List() SubscriptionDocumentIterator
	ListAll() (*pkg.SubscriptionDocuments, error)
	Get(string, string) (*pkg.SubscriptionDocument, error)
	Replace(string, *pkg.SubscriptionDocument, *Options) (*pkg.SubscriptionDocument, error)
	Delete(string, *pkg.SubscriptionDocument, *Options) error
	Query(string, *Query) SubscriptionDocumentIterator
	QueryAll(string, *Query) (*pkg.SubscriptionDocuments, error)
}

type subscriptionDocumentListIterator struct {
	*subscriptionDocumentClient
	continuation string
	done         bool
}

type subscriptionDocumentQueryIterator struct {
	*subscriptionDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
}

// SubscriptionDocumentIterator is a subscriptionDocument iterator
type SubscriptionDocumentIterator interface {
	Next() (*pkg.SubscriptionDocuments, error)
}

// NewSubscriptionDocumentClient returns a new subscriptionDocument client
func NewSubscriptionDocumentClient(collc CollectionClient, collid string) SubscriptionDocumentClient {
	return &subscriptionDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *subscriptionDocumentClient) all(i SubscriptionDocumentIterator) (*pkg.SubscriptionDocuments, error) {
	allsubscriptionDocuments := &pkg.SubscriptionDocuments{}

	for {
		subscriptionDocuments, err := i.Next()
		if err != nil {
			return nil, err
		}
		if subscriptionDocuments == nil {
			break
		}

		allsubscriptionDocuments.Count += subscriptionDocuments.Count
		allsubscriptionDocuments.ResourceID = subscriptionDocuments.ResourceID
		allsubscriptionDocuments.SubscriptionDocuments = append(allsubscriptionDocuments.SubscriptionDocuments, subscriptionDocuments.SubscriptionDocuments...)
	}

	return allsubscriptionDocuments, nil
}

func (c *subscriptionDocumentClient) Create(partitionkey string, newsubscriptionDocument *pkg.SubscriptionDocument, options *Options) (subscriptionDocument *pkg.SubscriptionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newsubscriptionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newsubscriptionDocument, &subscriptionDocument, headers)
	return
}

func (c *subscriptionDocumentClient) List() SubscriptionDocumentIterator {
	return &subscriptionDocumentListIterator{subscriptionDocumentClient: c}
}

func (c *subscriptionDocumentClient) ListAll() (*pkg.SubscriptionDocuments, error) {
	return c.all(c.List())
}

func (c *subscriptionDocumentClient) Get(partitionkey, subscriptionDocumentid string) (subscriptionDocument *pkg.SubscriptionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)
	err = c.do(http.MethodGet, c.path+"/docs/"+subscriptionDocumentid, "docs", c.path+"/docs/"+subscriptionDocumentid, http.StatusOK, nil, &subscriptionDocument, headers)
	return
}

func (c *subscriptionDocumentClient) Replace(partitionkey string, newsubscriptionDocument *pkg.SubscriptionDocument, options *Options) (subscriptionDocument *pkg.SubscriptionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newsubscriptionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodPut, c.path+"/docs/"+newsubscriptionDocument.ID, "docs", c.path+"/docs/"+newsubscriptionDocument.ID, http.StatusOK, &newsubscriptionDocument, &subscriptionDocument, headers)
	return
}

func (c *subscriptionDocumentClient) Delete(partitionkey string, subscriptionDocument *pkg.SubscriptionDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, subscriptionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodDelete, c.path+"/docs/"+subscriptionDocument.ID, "docs", c.path+"/docs/"+subscriptionDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *subscriptionDocumentClient) Query(partitionkey string, query *Query) SubscriptionDocumentIterator {
	return &subscriptionDocumentQueryIterator{subscriptionDocumentClient: c, partitionkey: partitionkey, query: query}
}

func (c *subscriptionDocumentClient) QueryAll(partitionkey string, query *Query) (*pkg.SubscriptionDocuments, error) {
	return c.all(c.Query(partitionkey, query))
}

func (c *subscriptionDocumentClient) setOptions(options *Options, subscriptionDocument *pkg.SubscriptionDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if !options.NoETag {
		if subscriptionDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", subscriptionDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}

	return nil
}

func (i *subscriptionDocumentListIterator) Next() (subscriptionDocuments *pkg.SubscriptionDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.do(http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &subscriptionDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *subscriptionDocumentQueryIterator) Next() (subscriptionDocuments *pkg.SubscriptionDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.do(http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &subscriptionDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}
