// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"net/http"
	"strings"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type asyncOperationDocumentClient struct {
	*databaseClient
	path string
}

// AsyncOperationDocumentClient is a asyncOperationDocument client
type AsyncOperationDocumentClient interface {
	Create(string, *pkg.AsyncOperationDocument, *Options) (*pkg.AsyncOperationDocument, error)
	List() AsyncOperationDocumentIterator
	ListAll() (*pkg.AsyncOperationDocuments, error)
	Get(string, string) (*pkg.AsyncOperationDocument, error)
	Replace(string, *pkg.AsyncOperationDocument, *Options) (*pkg.AsyncOperationDocument, error)
	Delete(string, *pkg.AsyncOperationDocument, *Options) error
	Query(string, *Query) AsyncOperationDocumentIterator
	QueryAll(string, *Query) (*pkg.AsyncOperationDocuments, error)
}

type asyncOperationDocumentListIterator struct {
	*asyncOperationDocumentClient
	continuation string
	done         bool
}

type asyncOperationDocumentQueryIterator struct {
	*asyncOperationDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
}

// AsyncOperationDocumentIterator is a asyncOperationDocument iterator
type AsyncOperationDocumentIterator interface {
	Next() (*pkg.AsyncOperationDocuments, error)
}

// NewAsyncOperationDocumentClient returns a new asyncOperationDocument client
func NewAsyncOperationDocumentClient(collc CollectionClient, collid string) AsyncOperationDocumentClient {
	return &asyncOperationDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *asyncOperationDocumentClient) all(i AsyncOperationDocumentIterator) (*pkg.AsyncOperationDocuments, error) {
	allasyncOperationDocuments := &pkg.AsyncOperationDocuments{}

	for {
		asyncOperationDocuments, err := i.Next()
		if err != nil {
			return nil, err
		}
		if asyncOperationDocuments == nil {
			break
		}

		allasyncOperationDocuments.Count += asyncOperationDocuments.Count
		allasyncOperationDocuments.ResourceID = asyncOperationDocuments.ResourceID
		allasyncOperationDocuments.AsyncOperationDocuments = append(allasyncOperationDocuments.AsyncOperationDocuments, asyncOperationDocuments.AsyncOperationDocuments...)
	}

	return allasyncOperationDocuments, nil
}

func (c *asyncOperationDocumentClient) Create(partitionkey string, newasyncOperationDocument *pkg.AsyncOperationDocument, options *Options) (asyncOperationDocument *pkg.AsyncOperationDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newasyncOperationDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newasyncOperationDocument, &asyncOperationDocument, headers)
	return
}

func (c *asyncOperationDocumentClient) List() AsyncOperationDocumentIterator {
	return &asyncOperationDocumentListIterator{asyncOperationDocumentClient: c}
}

func (c *asyncOperationDocumentClient) ListAll() (*pkg.AsyncOperationDocuments, error) {
	return c.all(c.List())
}

func (c *asyncOperationDocumentClient) Get(partitionkey, asyncOperationDocumentid string) (asyncOperationDocument *pkg.AsyncOperationDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)
	err = c.do(http.MethodGet, c.path+"/docs/"+asyncOperationDocumentid, "docs", c.path+"/docs/"+asyncOperationDocumentid, http.StatusOK, nil, &asyncOperationDocument, headers)
	return
}

func (c *asyncOperationDocumentClient) Replace(partitionkey string, newasyncOperationDocument *pkg.AsyncOperationDocument, options *Options) (asyncOperationDocument *pkg.AsyncOperationDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newasyncOperationDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodPut, c.path+"/docs/"+newasyncOperationDocument.ID, "docs", c.path+"/docs/"+newasyncOperationDocument.ID, http.StatusOK, &newasyncOperationDocument, &asyncOperationDocument, headers)
	return
}

func (c *asyncOperationDocumentClient) Delete(partitionkey string, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, asyncOperationDocument, headers)
	if err != nil {
		return
	}

	err = c.do(http.MethodDelete, c.path+"/docs/"+asyncOperationDocument.ID, "docs", c.path+"/docs/"+asyncOperationDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *asyncOperationDocumentClient) Query(partitionkey string, query *Query) AsyncOperationDocumentIterator {
	return &asyncOperationDocumentQueryIterator{asyncOperationDocumentClient: c, partitionkey: partitionkey, query: query}
}

func (c *asyncOperationDocumentClient) QueryAll(partitionkey string, query *Query) (*pkg.AsyncOperationDocuments, error) {
	return c.all(c.Query(partitionkey, query))
}

func (c *asyncOperationDocumentClient) setOptions(options *Options, asyncOperationDocument *pkg.AsyncOperationDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if !options.NoETag {
		if asyncOperationDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", asyncOperationDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}

	return nil
}

func (i *asyncOperationDocumentListIterator) Next() (asyncOperationDocuments *pkg.AsyncOperationDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.do(http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &asyncOperationDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *asyncOperationDocumentQueryIterator) Next() (asyncOperationDocuments *pkg.AsyncOperationDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.do(http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &asyncOperationDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}
